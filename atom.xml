<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰冻橘子的自留地</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.onebug.tech/"/>
  <updated>2021-10-10T11:35:36.974Z</updated>
  <id>http://www.onebug.tech/</id>
  
  <author>
    <name>冰冻橘子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal详解</title>
    <link href="http://www.onebug.tech/2021/10/10/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/ThreadLocal/"/>
    <id>http://www.onebug.tech/2021/10/10/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/ThreadLocal/</id>
    <published>2021-10-09T16:00:00.000Z</published>
    <updated>2021-10-10T11:35:36.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h1><p>当访问共享变量时，往往需要加锁来保证数据同步。<strong>一种避免使用同步的方式就是不共享数据。如果仅在单线程中访问数据，就不需要同步了，这种技术称为线程封闭。</strong></p><p>线程封闭技术有一个常见的应用，JDBC的Connection对象。Connection对象在实现的时候并没有对线程安全做太多的处理，JDBC的规范里也没有要求Connection对象必须是线程安全的。实际在服务器应用程序中，线程从连接池获取了一个Connection对象，使用完再把Connection对象返回给连接池，由于大多数请求都是由单线程采用同步的方式来处理的，并且在Connection对象返回之前，连接池不会将它分配给其他线程。因此这种连接管理模式处理请求时隐含的将Connection对象封闭在线程里面，这样我们使用的Connection对象虽然本身不是线程安全的，但是它通过线程封闭也做到了线程安全。</p><p>实现线程封闭，一般有三种方法：Ad-hoc 线程封闭、堆栈封闭、<strong>ThreadLocal线程封闭</strong>。</p><a id="more"></a><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>ThreadLocal 是JDK 包提供的，它提供了线程本地变量，也就是如果你创建了一个ThreadLocal 变量，那么访问这个变量的每个线程都会有这个变量的一个本地副本。当多个线程操作这个变量时，实际操作的是自己本地内存里面的变量，从而避免了线程安全问题。创建一个ThreadLocal 变量后，每个线程都会复制一个变量到自己的本地内存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   一个简单ThreadLocal示例</span></span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVal=<span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        localVal.set(<span class="string">"main THREAD"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(localVal.get());</span><br><span class="line">            localVal.set(<span class="string">"THREAD 1"</span>);</span><br><span class="line">            System.out.println(localVal.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            localVal.set(<span class="string">"THREAD 2"</span>);</span><br><span class="line">            System.out.println(localVal.get());</span><br><span class="line">        &#125;).start();</span><br><span class="line">        </span><br><span class="line">        localVal.remove();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.onebug.tech/image-20211010191615958.png" alt="image-20211010191615958"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><img src="http://image.onebug.tech/image-20211010191911770.png" alt="image-20211010191911770"></p><p><code>Thread</code> 类中有一个<code>threadLocals</code> 和一个<code>inheritableThreadLocals</code> ， 它们都是<code>ThreadLocalMap</code> 类型的变量， 而<code>ThreadLocalMap</code> 是一个定制化的<code>Hashmap</code> 。其实每个线程的本地变量不是存放在<code>ThreadLocal</code> 实例里面，而是存放在调用线程的<code>threadLocals</code> 变量里面。也就是说， <code>ThreadLocal</code> 类型的本地变量存放在具体的线程内存空间中。而<code>ThreadLocal</code> 就是一个工具壳类，它通过<code>set</code> 方法把<code>value</code> 值放入调用线程的<code>threadLocals</code> 里面并存放起来，当调用线程调用它的get 方法时，再从当前线程的<code>threadLocals</code> 变量里面将其拿出来使用。</p><p><code>ThreadLocal</code>工具类的<code>set</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取线程对应的ThreadLocalMap</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">// 将this作为key,写入ThreadLocalMap </span></span><br><span class="line">    map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadLocal</code>工具类的<code>get</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>内存泄露与预防：每个线程的本地变量存放在线程自己的内存变量<code>threadLocals</code> 中，如果当前线程一直不消亡， 那么这些本地变量会一直存在， 所以可能会造成内存溢出， 因此使用完毕后要记得调用<code>ThreadLocal</code> 的<code>remove</code> 方法删除对应线程的<code>threadLocals</code> 中的本地变量。</p></li><li><p><code>InheritableThreadLocal</code>：<code>InheritableThreadLocal</code>继承自<code>ThreadLocal</code> ， 其提供了一个特性，就是让子线程可以访问在父线程中设置的本地变量。它的实现原理是当父线程创建子线程时，构造函数会把父线程中<code>inheritableThreadLocals</code> 变量里面的本地变量复制一份保存到子线程的<code>inheritableThreadLocals</code> 变量里面。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程封闭&quot;&gt;&lt;a href=&quot;#线程封闭&quot; class=&quot;headerlink&quot; title=&quot;线程封闭&quot;&gt;&lt;/a&gt;线程封闭&lt;/h1&gt;&lt;p&gt;当访问共享变量时，往往需要加锁来保证数据同步。&lt;strong&gt;一种避免使用同步的方式就是不共享数据。如果仅在单线程中访问数据，就不需要同步了，这种技术称为线程封闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;线程封闭技术有一个常见的应用，JDBC的Connection对象。Connection对象在实现的时候并没有对线程安全做太多的处理，JDBC的规范里也没有要求Connection对象必须是线程安全的。实际在服务器应用程序中，线程从连接池获取了一个Connection对象，使用完再把Connection对象返回给连接池，由于大多数请求都是由单线程采用同步的方式来处理的，并且在Connection对象返回之前，连接池不会将它分配给其他线程。因此这种连接管理模式处理请求时隐含的将Connection对象封闭在线程里面，这样我们使用的Connection对象虽然本身不是线程安全的，但是它通过线程封闭也做到了线程安全。&lt;/p&gt;
&lt;p&gt;实现线程封闭，一般有三种方法：Ad-hoc 线程封闭、堆栈封闭、&lt;strong&gt;ThreadLocal线程封闭&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.onebug.tech/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java并发编程之美" scheme="http://www.onebug.tech/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>java多线程编程基础</title>
    <link href="http://www.onebug.tech/2021/10/08/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.onebug.tech/2021/10/08/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-07T16:00:00.000Z</published>
    <updated>2021-10-08T13:46:16.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h1><p>在讨论什么是线程前有必要先说下什么是进程，因为线程是进程中的一个实体，线程本身是不会独立存在的。进程是代码在数据集合上的一次运行活动， 是系统进行资源分配和调度的基本单位， 线程则是进程的一个执行路径， 一个进程中至少有一个线程，进程中的多个线程共享进程的资源。操作系统在分配资源时是把资源分配给进程的， 但是CPU 资源比较特殊， 它是被分配到线程的， 因为真正要占用C PU 运行的是线程， 所以也说线程是CPU 分配的基本单位。</p><a id="more"></a><h1 id="线程的创建与启动"><a href="#线程的创建与启动" class="headerlink" title="线程的创建与启动"></a>线程的创建与启动</h1><p>Java 中有三种线程创建方式，分别为：</p><h2 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h2><p>实现<code>Runnable</code> 接口的<code>run</code> 方法。使用<code>lambda</code>简化代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Runnable task = () -&gt; &#123; System.out.println(<span class="string">"Task #1 is running"</span>); &#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br></pre></td></tr></table></figure><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>继承<code>Thread</code> 类并重写<code>run</code> 的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"child thread run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadTest().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>使用<code>FutureTask</code> 方式。<code>FutureTask</code>实现了<code>Callable</code>接口，能够获取异步任务的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建异步任务</span></span><br><span class="line">FutureTask&lt;Integer&gt; futureTask=<span class="keyword">new</span> FutureTask&lt;&gt;(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"task#2: cal 1+2"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+<span class="number">2</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//启动任务</span></span><br><span class="line"><span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待任务执行完毕，并返回结果</span></span><br><span class="line"><span class="keyword">int</span> result=futureTask.get();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"result is "</span>+result);</span><br></pre></td></tr></table></figure><h1 id="线程通知与等待"><a href="#线程通知与等待" class="headerlink" title="线程通知与等待"></a>线程通知与等待</h1><h2 id="wait-和notify"><a href="#wait-和notify" class="headerlink" title="wait()和notify()"></a>wait()和notify()</h2><p>当一个线程调用一个共享变量的<code>wait()</code>方法时， 该调用线程会被阻塞挂起， 直到发生下面几件事情之一才返回： </p><ul><li>其他线程调用了该共享对象的<code>notify()</code>或者<code>notifyAll()</code>方法；</li><li>其他线程调用了该线程的<code>interrupt()</code>方法， 该线程抛出<code>InterruptedException</code> 异常返回。</li></ul><p>一个线程调用共享对象的notify（）方法后，会唤醒一个在该共享变量上调用<code>wait</code>系列方法后被挂起的线程。一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是<strong>随机</strong>的。不同于<code>notify()</code>函数只会唤醒一个被阻塞到该共享变量上的线程，<code>notifyAll()</code>方法则会唤醒所有在该共享变量上由于调用<code>wait</code> 系列方法而被挂起的线程。</p><p><code>notify</code>和<code>wait</code>系列方法，都需要当前线程获取到了共享变量的监视器锁后，才可以调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Thread thread1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!prepare)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread()+<span class="string">"阻塞挂起中..."</span>);</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">"被唤醒"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程被中断"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread1.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            prepare=<span class="keyword">true</span>;</span><br><span class="line">            System.out.println(Thread.currentThread()+<span class="string">"唤醒其他阻塞挂起的线程"</span>);</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p><img src="http://image.onebug.tech/image-20211008205319745.png" alt="image-20211008205319745"></p><blockquote><p>另外需要注意的是，当前线程调用共享变量的<code>wait()</code>方法后只会释放当前共享变量上的锁，如果当前线程还持有其他共享变量的锁，则这些锁是不会被释放的</p></blockquote><h2 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h2><p>另外需要注意的是，一个线程可以从挂起状态变为可以运行状态（ 也就是被唤醒）即使该线程没有被其他线程调用<code>notify()</code>、<code>notifyAll()</code>方法进行通知，或者被中断，或者等待超时，这就是所谓的虚假唤醒。<br>虽然虚假唤醒在应用实践中很少发生，但要防患于未然，做法就是不停地去测试该线程被唤醒的条件是否满足，不满足则继续等待，也就是说在一个循环中调用<code>wait()</code>方法进行防范。退出循环的条件是满足了唤醒该线程的条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">synchronized (obj)&#123;</span><br><span class="line">    while (!prepare)&#123;</span><br><span class="line">        &#x2F;&#x2F;阻塞挂起</span><br><span class="line">        obj.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="wait超时"><a href="#wait超时" class="headerlink" title="wait超时"></a>wait超时</h2><ul><li><code>wait(long timeout)</code>：该方法相比<code>wait()</code> 方法多了一个超时参数，它的不同之处在于，如果一个线程调用共享对象的该方法挂起后， 没有在指定的timeout ms 时间内被唤醒，那么该函数还是会因为超时而返回。</li></ul><h1 id="线程的其他方法"><a href="#线程的其他方法" class="headerlink" title="线程的其他方法"></a>线程的其他方法</h1><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>在项目实践中经常会遇到一个场景，就是是需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源， 需要等待多个线程全部加载完毕再汇总处理。Thread 类中有一个简单的<code>join</code> 方法就可以做这个事情。（事实上不太使用该方法，<code>AQS</code>中的<code>CountdownLatch</code>更为强大和常用）</p><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>Thread 类中有一个静态的<code>sleep</code>方法，当一个执行中的线程调用了<code>Thread</code> 的<code>sleep</code> 方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与CPU的调度。指定的睡眠时间到了后该函数会正常返回，线程就处于就绪状态，然后参与CPU 的调度，获取到CPU 资源后就可以继续运行了。不同于<code>wait</code>方法，线程在调用<code>sleep</code>方法后，该线程所拥有的监视器资源，比如锁还是持有不让出的。</p><h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>Thread 类中有一个静态的yield 方法，当一个线程调用<code>yield</code>方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU使用，但是线程调度器可以无条件忽略这个暗示。当一个线程调用<code>yield</code> 方法时， 当前线程会让出CPU使用权，然后处于就绪状态，线程调度器会从线程就绪队列里面获取一个线程优先级最高的线程，当然也有可能会调度到刚刚让出CPU 的那个线程来获取CPU 执行权，这也是<code>yield</code>和<code>sleep</code>不同的地方。</p><h1 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h1><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行， 而是被中断的线程根据中断状态自行处理。</p><ul><li><code>void interrup()</code> 方法： 中断线程， 例如，当线程A 运行时，线程B 可以调用钱程A的<code>interrupt()</code>方法来设置线程A 的中断标志为true 并立即返回。<strong>设置标志仅仅是设置标志， 线程A 实际并没有被中断， 它会继续往下执行</strong>。如果线程A 因为调用了<code>wait</code> 系列函数、<code>join</code> 方法或者<code>sleep</code> 方法而被阻塞挂起，这时候若线程B 调用线程A 的<code>interrupt()</code> 方法，线程A 会在调用这些方法的地方抛出<code>InterruptedException</code> 异常而返回。</li><li><code>boolean isinterrupte()</code> 方法： 检测当前线程是否被中断，如果是返回<code>true</code> ， 否则返回<code>false</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Thread thread=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">float</span> i=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (i&lt;<span class="number">1000</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//                clean up if required</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">"中断线程"</span>+thread);</span><br></pre></td></tr></table></figure><p><img src="http://image.onebug.tech/image-20211008212955074.png" alt="image-20211008212955074"></p><p>可以看到，程序没有抛出异常，而是正常执行。</p><h1 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h1><p>死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会一直相互等待而无法继续运行下去。</p><p>死锁的产生必须具备以下四个条件：</p><ul><li>互斥条件： 指线程对己经获取到的资源进行排它性使用， 即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</li><li>请求并持有条件： 指一个线程己经持有了至少一个资源， 但又提出了新的资源请求，而新资源己被其他线程占有，所以当前线程会被阻塞，但阻塞的同时并不释放自己己经获取的资源。</li><li>不可剥夺条件： 指线程获取到的资源在自己使用完之前不能被其他线程抢占， 只有在自己使用完毕后才由自己释放该资源。</li><li>环路等待条件： 指在发生死锁时， 必然存在一个线程→资源的环形链， 即线程集合{TO , TL T2 ，…， Tn ｝中的TO 正在等待一个Tl 占用的资源， Tl 正在等待T2 占用的资源，……Tn 正在等待己被TO 占用的资源。</li></ul><p>一个线程死锁的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object resource1=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object resource2=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread threadA=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"threadA 尝试获取 resource1中..."</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                System.out.println(<span class="string">"threadA 获取 resource1成功"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"threadA 尝试获取 resource2中..."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"threadA 获取 resource2成功"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread threadB=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"threadB 尝试获取 resource2中..."</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                System.out.println(<span class="string">"threadB 获取 resource2成功"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"threadB尝试获取 resource1中..."</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"threadB 获取 resource1成功"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.onebug.tech/image-20211008214107190.png" alt="image-20211008214107190"></p><p>如图所示，<code>threadA</code>和<code>threadB</code>形成了线程死锁。</p><p><img src="http://image.onebug.tech/image-20211008213421323.png" alt="image-20211008213421323"></p><p>关于如何避免线程死锁，操作系统中有详细介绍，这里不赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是线程&quot;&gt;&lt;a href=&quot;#什么是线程&quot; class=&quot;headerlink&quot; title=&quot;什么是线程&quot;&gt;&lt;/a&gt;什么是线程&lt;/h1&gt;&lt;p&gt;在讨论什么是线程前有必要先说下什么是进程，因为线程是进程中的一个实体，线程本身是不会独立存在的。进程是代码在数据集合上的一次运行活动， 是系统进行资源分配和调度的基本单位， 线程则是进程的一个执行路径， 一个进程中至少有一个线程，进程中的多个线程共享进程的资源。操作系统在分配资源时是把资源分配给进程的， 但是CPU 资源比较特殊， 它是被分配到线程的， 因为真正要占用C PU 运行的是线程， 所以也说线程是CPU 分配的基本单位。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://www.onebug.tech/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java并发编程之美" scheme="http://www.onebug.tech/tags/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>Netty的优化</title>
    <link href="http://www.onebug.tech/2021/09/30/java/netty/Netty%E4%BC%98%E5%8C%96/"/>
    <id>http://www.onebug.tech/2021/09/30/java/netty/Netty%E4%BC%98%E5%8C%96/</id>
    <published>2021-09-29T16:00:00.000Z</published>
    <updated>2021-09-30T02:23:47.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="共享Handler"><a href="#共享Handler" class="headerlink" title="共享Handler"></a>共享Handler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> Spliter());<span class="comment">//帧解码器</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> PacketDecoder());<span class="comment">//数据包解码器</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> HandlerA());<span class="comment">//业务Handler</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> HandlerB());<span class="comment">//业务Handler</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> HandlerC());<span class="comment">//业务Handler</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> PacketEncoder());<span class="comment">//数据包编码器</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>每次有新连接到来的时候，都会调用 <code>ChannelInitializer</code> 的 <code>initChannel()</code> 方法，然后这里相关的 <code>handler</code> 都会被 <code>new</code> 一次。许多 <code>handler</code>，他们内部都是没有成员变量的，也就是说是无状态的，我们完全可以使用单例模式，即调用 <code>pipeline().addLast()</code> 方法的时候，都直接使用单例，不需要每次都 <code>new</code>，提高效率，也避免了创建很多小的对象。</p><p>单例改造：对于无状态<code>Handler</code>，使用单例模式，多个channel共享一个实例</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 加上注解标识，表明该 handler 是可以多个 channel 共享的</span></span><br><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerA</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">APacket</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 构造单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HandlerA INSTANCE = <span class="keyword">new</span> HandlerA();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HandlerA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@ChannelHandler.Sharable</code> 显示地告诉 Netty，这个 handler 是支持多个 channel 共享的，否则会报错。</p></blockquote><h1 id="合并编解码器"><a href="#合并编解码器" class="headerlink" title="合并编解码器"></a>合并编解码器</h1><p>Netty 内部提供了一个类，叫做 <code>MessageToMessageCodec</code>，使用它可以让我们的编解码操作放到一个类里面去实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PacketCodecHandler</span> <span class="keyword">extends</span> <span class="title">MessageToMessageCodec</span>&lt;<span class="title">ByteBuf</span>,<span class="title">Packet</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> PacketCodecHandler INSTANCE=<span class="keyword">new</span> PacketCodecHandler();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, Packet msg, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        out.add(PacketCodeC.DEFAULT.encode(ctx.alloc(),msg));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf msg, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        out.add(PacketCodeC.DEFAULT.decode(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>PacketCodecHandler</code>一般是一个无状态的 <code>handler</code>，因此，同样可以使用单例模式来实现。我们需要实现 <code>MessageToMessageCodec</code>的<code>decode()</code> 和 <code>encode()</code> 方法，<code>decode</code> 是将二进制数据 <code>ByteBuf</code> 转换为 java 对象 <code>Packet</code>，而 <code>encode</code> 操作是一个相反的过程，在 <code>encode()</code> 方法里面，我们需要传入了 <code>channel</code> 的 内存分配器，手工分配了 <code>ByteBuf</code>。</p><h1 id="缩短事件传播路径"><a href="#缩短事件传播路径" class="headerlink" title="缩短事件传播路径"></a>缩短事件传播路径</h1><h2 id="合并平行-handler"><a href="#合并平行-handler" class="headerlink" title="合并平行 handler"></a>合并平行 handler</h2><p>在很多情况下，每次 decode 出来一个指令对象之后，其实只会在一个指令 <code>handler</code> 上进行处理，因此，我们其实可以把这么多的指令 <code>handler</code> 压缩为一个 <code>handler</code>实现路由功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@ChannelHandler.Sharable</span><br><span class="line">public class RouteHandler extends SimpleChannelInboundHandler&lt;Packet&gt; &#123;</span><br><span class="line">    public static final RouteHandler INSTANCE &#x3D; new RouteHandler();</span><br><span class="line"></span><br><span class="line">    private Map&lt;Byte, SimpleChannelInboundHandler&lt;? extends Packet&gt;&gt; routeMap;</span><br><span class="line"></span><br><span class="line">    private IMHandler() &#123;</span><br><span class="line">        routeMap &#x3D; new HashMap&lt;Byte, SimpleChannelInboundHandler&lt;? extends Packet&gt;&gt;()&#123;&#123;</span><br><span class="line">            put(CommandA, HandlerA.INSTANCE);</span><br><span class="line">           put(CommandB, HandlerB.INSTANCE);</span><br><span class="line">           put(CommandC, HandlerC.INSTANCE);</span><br><span class="line"></span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, Packet packet) throws Exception &#123;</span><br><span class="line">        routeMap.get(packet.getCommand()).channelRead(ctx, packet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述优化方法后，我们的<code>pipeline</code>最终变成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">                .childHandler(new ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">                    protected void initChannel(NioSocketChannel ch) &#123;</span><br><span class="line">                        ch.pipeline().addLast(new Spliter());&#x2F;&#x2F;帧解码器</span><br><span class="line">                        ch.pipeline().addLast(new PacketCodecHandler.INSTANCE());&#x2F;&#x2F;数据包编解码器</span><br><span class="line">                        ch.pipeline().addLast(RouteHandler.INSTANCE);&#x2F;&#x2F;路由</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>第一个<code>Handler</code>是帧解码器 <code>Spliter</code>，我们是无法使用单例模式进行改造的，因为他内部实现是与每个 <code>channel</code> 有关，每个 <code>Spliter</code> 需要维持每个 channel 当前读到的数据，也就是说他是有状态的。</p></blockquote><h2 id="更改事件传播源"><a href="#更改事件传播源" class="headerlink" title="更改事件传播源"></a>更改事件传播源</h2><p>如果你的 <code>outBound</code> 类型的 <code>handler</code> 较多，在写数据的时候能用 <code>ctx.writeAndFlush()</code> 就用这个方法。</p><p><code>ctx.writeAndFlush()</code> 是从 pipeline 链中的当前节点开始往前找到第一个 outBound 类型的 handler 把对象往前进行传播，如果这个对象确认不需要经过其他 outBound 类型的 handler 处理，就使用这个方法。</p><p><img src="http://image.onebug.tech/1664b767ddcf7711~tplv-t2oaga2asx-watermark.awebp" alt="image.png"></p><p><code>ctx.channel().writeAndFlush()</code> 是从 <code>pipeline</code> 链中的最后一个 <code>outBound</code> 类型的 <code>handler</code> 开始，把对象往前进行传播，如果你确认当前创建的对象需要经过后面的 <code>outBound</code> 类型的 handler，那么就调用此方法。</p><p><img src="http://image.onebug.tech/1664b767de0cf5ea~tplv-t2oaga2asx-watermark.awebp" alt="image.png"></p><h1 id="减少阻塞主线程的操作"><a href="#减少阻塞主线程的操作" class="headerlink" title="减少阻塞主线程的操作"></a>减少阻塞主线程的操作</h1><p>通常我们的应用程序会涉及到数据库或者网络，比如以下这个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, T packet)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. balabala 一些逻辑</span></span><br><span class="line">    <span class="comment">// 2. 数据库或者网络等一些耗时的操作</span></span><br><span class="line">    <span class="comment">// 3. writeAndFlush()</span></span><br><span class="line">    <span class="comment">// 4. balabala 其他的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Netty是基于事件驱动的异步网络框架，一个 <code>handler</code> 中的 <code>channelRead0()</code> 方法阻塞了 NIO 线程，最终都会拖慢绑定在该 NIO 线程上的其他所有的 <code>channel</code>。对于耗时的操作，我们需要把这些耗时的操作丢到我们的业务线程池或利用消息队列中去处理，这样，就可以避免一些耗时的操作影响 Netty 的 NIO 线程，从而影响其他的 <code>channel</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;共享Handler&quot;&gt;&lt;a href=&quot;#共享Handler&quot; class=&quot;headerlink&quot; title=&quot;共享Handler&quot;&gt;&lt;/a&gt;共享Handler&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;serverBootstrap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                .childHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ChannelInitializer&amp;lt;NioSocketChannel&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initChannel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(NioSocketChannel ch)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Spliter());&lt;span class=&quot;comment&quot;&gt;//帧解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PacketDecoder());&lt;span class=&quot;comment&quot;&gt;//数据包解码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HandlerA());&lt;span class=&quot;comment&quot;&gt;//业务Handler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HandlerB());&lt;span class=&quot;comment&quot;&gt;//业务Handler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HandlerC());&lt;span class=&quot;comment&quot;&gt;//业务Handler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        ch.pipeline().addLast(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PacketEncoder());&lt;span class=&quot;comment&quot;&gt;//数据包编码器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每次有新连接到来的时候，都会调用 &lt;code&gt;ChannelInitializer&lt;/code&gt; 的 &lt;code&gt;initChannel()&lt;/code&gt; 方法，然后这里相关的 &lt;code&gt;handler&lt;/code&gt; 都会被 &lt;code&gt;new&lt;/code&gt; 一次。许多 &lt;code&gt;handler&lt;/code&gt;，他们内部都是没有成员变量的，也就是说是无状态的，我们完全可以使用单例模式，即调用 &lt;code&gt;pipeline().addLast()&lt;/code&gt; 方法的时候，都直接使用单例，不需要每次都 &lt;code&gt;new&lt;/code&gt;，提高效率，也避免了创建很多小的对象。&lt;/p&gt;
&lt;p&gt;单例改造：对于无状态&lt;code&gt;Handler&lt;/code&gt;，使用单例模式，多个channel共享一个实例&lt;/p&gt;
    
    </summary>
    
    
      <category term="netty" scheme="http://www.onebug.tech/categories/netty/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="netty" scheme="http://www.onebug.tech/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>心跳与空闲检测</title>
    <link href="http://www.onebug.tech/2021/09/30/java/netty/%E5%BF%83%E8%B7%B3%E4%B8%8E%E7%A9%BA%E9%97%B2%E6%A3%80%E6%B5%8B/"/>
    <id>http://www.onebug.tech/2021/09/30/java/netty/%E5%BF%83%E8%B7%B3%E4%B8%8E%E7%A9%BA%E9%97%B2%E6%A3%80%E6%B5%8B/</id>
    <published>2021-09-29T16:00:00.000Z</published>
    <updated>2021-09-30T02:23:56.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-网络问题"><a href="#1-网络问题" class="headerlink" title="1. 网络问题"></a>1. 网络问题</h2><p>下图是网络应用程序普遍会遇到的一个问题：连接假死</p><p><img src="http://image.onebug.tech/1664c39eb393e946~tplv-t2oaga2asx-watermark.awebp" alt="image.png"></p><p>连接假死的现象是：在某一端（服务端或者客户端）看来，底层的 TCP 连接已经断开了，但是应用程序并没有捕获到，因此会认为这条连接仍然是存在的，从 TCP 层面来说，只有收到四次握手数据包或者一个 RST 数据包，连接的状态才表示已断开。</p><p>连接假死会带来以下两大问题</p><a id="more"></a><ol><li>对于服务端来说，因为每条连接都会耗费 cpu 和内存资源，大量假死的连接会逐渐耗光服务器的资源，最终导致性能逐渐下降，程序奔溃。</li><li>对于客户端来说，连接假死会造成发送数据超时，影响用户体验。</li></ol><p>通常，连接假死由以下几个原因造成的</p><ol><li>应用程序出现线程堵塞，无法进行数据的读写。</li><li>客户端或者服务端网络相关的设备出现故障，比如网卡，机房故障。</li><li>公网丢包。公网环境相对内网而言，非常容易出现丢包，网络抖动等现象，如果在一段时间内用户接入的网络连续出现丢包现象，那么对客户端来说数据一直发送不出去，而服务端也是一直收不到客户端来的数据，连接就一直耗着。</li></ol><p>如果我们的应用是面向用户的，那么公网丢包这个问题出现的概率是非常大的。对于内网来说，内网丢包，抖动也是会有一定的概率发生。一旦出现此类问题，客户端和服务端都会受到影响，接下来，我们分别从服务端和客户端的角度来解决连接假死的问题。</p><h2 id="2-服务端空闲检测"><a href="#2-服务端空闲检测" class="headerlink" title="2. 服务端空闲检测"></a>2. 服务端空闲检测</h2><p>对于服务端来说，客户端的连接如果出现假死，那么服务端将无法收到客户端的数据，也就是说，如果能一直收到客户端发来的数据，那么可以说明这条连接还是活的，因此，服务端对于连接假死的应对策略就是空闲检测。</p><p>何为空闲检测？空闲检测指的是每隔一段时间，检测这段时间内是否有数据读写，简化一下，我们的服务端只需要检测一段时间内，是否收到过客户端发来的数据即可，Netty 自带的 <code>IdleStateHandler</code> 就可以实现这个功能。</p><p>接下来，我们写一个类继承自 <code>IdleStateHandler</code>，来定义检测到假死连接之后的逻辑。</p><blockquote><p>IMIdleStateHandler.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class IMIdleStateHandler extends IdleStateHandler &#123;</span><br><span class="line"></span><br><span class="line">    private static final int READER_IDLE_TIME &#x3D; 15;</span><br><span class="line"></span><br><span class="line">    public IMIdleStateHandler() &#123;</span><br><span class="line">        super(READER_IDLE_TIME, 0, 0, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) &#123;</span><br><span class="line">        System.out.println(READER_IDLE_TIME + &quot;秒内未读到数据，关闭连接&quot;);</span><br><span class="line">        ctx.channel().close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先，我们观察一下 <code>IMIdleStateHandler</code> 的构造函数，他调用父类 <code>IdleStateHandler</code> 的构造函数，有四个参数，其中第一个表示读空闲时间，指的是在这段时间内如果没有数据读到，就表示连接假死；第二个是写空闲时间，指的是 在这段时间如果没有写数据，就表示连接假死；第三个参数是读写空闲时间，表示在这段时间内如果没有产生数据读或者写，就表示连接假死。写空闲和读写空闲为0，表示我们不关心者两类条件；最后一个参数表示时间单位。在我们的例子中，表示的是：如果 15 秒内没有读到数据，就表示连接假死。</li><li>连接假死之后会回调 <code>channelIdle()</code> 方法，我们这个方法里面打印消息，并手动关闭连接。</li></ol><p>接下来，我们把这个 handler 插入到服务端 pipeline 的最前面</p><blockquote><p>NettyServer.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">        .childHandler(new ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">            protected void initChannel(NioSocketChannel ch) &#123;</span><br><span class="line">                &#x2F;&#x2F; 空闲检测</span><br><span class="line">                ch.pipeline().addLast(new IMIdleStateHandler());</span><br><span class="line">                ch.pipeline().addLast(new Spliter());</span><br><span class="line">                &#x2F;&#x2F; ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>为什么要插入到最前面？是因为如果插入到最后面的话，如果这条连接读到了数据，但是在 inBound 传播的过程中出错了或者数据处理完完毕就不往后传递了（我们的应用程序属于这类），那么最终 <code>IMIdleStateHandler</code> 就不会读到数据，最终导致误判。</p><p>服务端的空闲检测时间完毕之后，接下来我们再思考一下，在一段时间之内没有读到客户端的数据，是否一定能判断连接假死呢？并不能，如果在这段时间之内客户端确实是没有发送数据过来，但是连接是 ok 的，那么这个时候服务端也是不能关闭这条连接的，为了防止服务端误判，我们还需要在客户端做点什么。</p><h2 id="3-客户端定时发心跳"><a href="#3-客户端定时发心跳" class="headerlink" title="3. 客户端定时发心跳"></a>3. 客户端定时发心跳</h2><p>服务端在一段时间内没有收到客户端的数据，这个现象产生的原因可以分为以下两种：</p><ol><li>连接假死。</li><li>非假死状态下确实没有发送数据。</li></ol><p>我们只需要排除掉第二种可能性，那么连接自然就是假死的。要排查第二种情况，我们可以在客户端定期发送数据到服务端，通常这个数据包称为心跳数据包，接下来，我们定义一个 handler，定期发送心跳给服务端</p><blockquote><p>HeartBeatTimerHandler.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class HeartBeatTimerHandler extends ChannelInboundHandlerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    private static final int HEARTBEAT_INTERVAL &#x3D; 5;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;</span><br><span class="line">        scheduleSendHeartBeat(ctx);</span><br><span class="line"></span><br><span class="line">        super.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void scheduleSendHeartBeat(ChannelHandlerContext ctx) &#123;</span><br><span class="line">        ctx.executor().schedule(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            if (ctx.channel().isActive()) &#123;</span><br><span class="line">                ctx.writeAndFlush(new HeartBeatRequestPacket());</span><br><span class="line">                scheduleSendHeartBeat(ctx);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, HEARTBEAT_INTERVAL, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ctx.executor()</code> 返回的是当前的 channel 绑定的 NIO 线程，不理解没关系，只要记住就行，然后，NIO 线程有一个方法，<code>schedule()</code>，类似 jdk 的延时任务机制，可以隔一段时间之后执行一个任务，而我们这边是实现了每隔 5 秒，向服务端发送一个心跳数据包，这个时间段通常要比服务端的空闲检测时间的一半要短一些，我们这里直接定义为空闲检测时间的三分之一，主要是为了排除公网偶发的秒级抖动。</p><p>实际在生产环境中，我们的发送心跳间隔时间和空闲检测时间可以略长一些，可以设置为几分钟级别，具体应用可以具体对待，没有强制的规定。</p><p>我们上面其实解决了服务端的空闲检测问题，服务端这个时候是能够在一定时间段之内关掉假死的连接，释放连接的资源了，但是对于客户端来说，我们也需要检测到假死的连接。</p><h2 id="4-服务端回复心跳与客户端空闲检测"><a href="#4-服务端回复心跳与客户端空闲检测" class="headerlink" title="4. 服务端回复心跳与客户端空闲检测"></a>4. 服务端回复心跳与客户端空闲检测</h2><p>客户端的空闲检测其实和服务端一样，依旧是在客户端 pipeline 的最前方插入 <code>IMIdleStateHandler</code></p><blockquote><p>NettyClient.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bootstrap</span><br><span class="line">        .handler(new ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">            public void initChannel(SocketChannel ch) &#123;</span><br><span class="line">                &#x2F;&#x2F; 空闲检测</span><br><span class="line">                ch.pipeline().addLast(new IMIdleStateHandler());</span><br><span class="line">                ch.pipeline().addLast(new Spliter());</span><br><span class="line">                &#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure><p>然后为了排除是否是因为服务端在非假死状态下确实没有发送数据，服务端也要定期发送心跳给客户端。</p><p>而其实在前面我们已经实现了客户端向服务端定期发送心跳，服务端这边其实只要在收到心跳之后回复客户端，给客户端发送一个心跳响应包即可。如果在一段时间之内客户端没有收到服务端发来的数据，也可以判定这条连接为假死状态。</p><p>因此，服务端的 pipeline 中需要再加上如下一个 handler - <code>HeartBeatRequestHandler</code>，由于这个 handler 的处理其实是无需登录的，所以，我们将该 handler 放置在 <code>AuthHandler</code> 前面</p><blockquote><p>NettyServer.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">                ch.pipeline().addLast(new IMIdleStateHandler());</span><br><span class="line">                ch.pipeline().addLast(new Spliter());</span><br><span class="line">                ch.pipeline().addLast(PacketCodecHandler.INSTANCE);</span><br><span class="line">                ch.pipeline().addLast(LoginRequestHandler.INSTANCE);</span><br><span class="line">                &#x2F;&#x2F; 加在这里</span><br><span class="line">                ch.pipeline().addLast(HeartBeatRequestHandler.INSTANCE);</span><br><span class="line">                ch.pipeline().addLast(AuthHandler.INSTANCE);</span><br><span class="line">                ch.pipeline().addLast(IMHandler.INSTANCE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><code>HeartBeatRequestHandler</code> 相应的实现为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@ChannelHandler.Sharable</span><br><span class="line">public class HeartBeatRequestHandler extends SimpleChannelInboundHandler&lt;HeartBeatRequestPacket&gt; &#123;</span><br><span class="line">    public static final HeartBeatRequestHandler INSTANCE &#x3D; new HeartBeatRequestHandler();</span><br><span class="line"></span><br><span class="line">    private HeartBeatRequestHandler() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void channelRead0(ChannelHandlerContext ctx, HeartBeatRequestPacket requestPacket) &#123;</span><br><span class="line">        ctx.writeAndFlush(new HeartBeatResponsePacket());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现非常简单，只是简单地回复一个 <code>HeartBeatResponsePacket</code> 数据包。客户端在检测到假死连接之后，断开连接，然后可以有一定的策略去重连，重新登录等等，这里就不展开了，留给读者自行实现。</p><p>关于心跳与健康检测相关的内容就讲解到这里，原理理解清楚了并不难实现，最后，我们来对本小节内容做一下总结。</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol><li>我们首先讨论了连接假死相关的现象以及产生的原因。</li><li>要处理假死问题首先我们要实现客户端与服务端定期发送心跳，在这里，其实服务端只需要对客户端的定时心跳包进行回复。</li><li>客户端与服务端如果都需要检测假死，那么直接在 pipeline 的最前方插入一个自定义 <code>IdleStateHandler</code>，在 <code>channelIdle()</code> 方法里面自定义连接假死之后的逻辑。</li><li>通常空闲检测时间要比发送心跳的时间的两倍要长一些，这也是为了排除偶发的公网抖动，防止误判。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-网络问题&quot;&gt;&lt;a href=&quot;#1-网络问题&quot; class=&quot;headerlink&quot; title=&quot;1. 网络问题&quot;&gt;&lt;/a&gt;1. 网络问题&lt;/h2&gt;&lt;p&gt;下图是网络应用程序普遍会遇到的一个问题：连接假死&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.onebug.tech/1664c39eb393e946~tplv-t2oaga2asx-watermark.awebp&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;连接假死的现象是：在某一端（服务端或者客户端）看来，底层的 TCP 连接已经断开了，但是应用程序并没有捕获到，因此会认为这条连接仍然是存在的，从 TCP 层面来说，只有收到四次握手数据包或者一个 RST 数据包，连接的状态才表示已断开。&lt;/p&gt;
&lt;p&gt;连接假死会带来以下两大问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="netty" scheme="http://www.onebug.tech/categories/netty/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="netty" scheme="http://www.onebug.tech/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>TCP的拆包和粘包</title>
    <link href="http://www.onebug.tech/2021/09/06/java/netty/%E6%8B%86%E5%8C%85%E4%B8%8E%E7%B2%98%E5%8C%85/"/>
    <id>http://www.onebug.tech/2021/09/06/java/netty/%E6%8B%86%E5%8C%85%E4%B8%8E%E7%B2%98%E5%8C%85/</id>
    <published>2021-09-05T16:00:00.000Z</published>
    <updated>2021-09-06T12:14:35.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="粘包、半包"><a href="#粘包、半包" class="headerlink" title="粘包、半包"></a>粘包、半包</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在网络传输中，粘包和半包应该是最常出现的问题。</p><p>TCP 传输中，客户端发送数据，实际是把数据写入到了 TCP 的缓存中，粘包和半包也就会在此时产生。</p><p>客户端给服务端发送了两条消息<code>ABC</code>和<code>DEF</code>，服务端这边的接收会有多少种情况呢？有可能是一次性收到了所有的消息<code>ABCDEF</code>，有可能是收到了三条消息<code>AB</code>、<code>CD</code>、<code>EF</code>。</p><p>上面所说的一次性收到了所有的消息<code>ABCDEF</code>，类似于粘包。如果客户端发送的包的大小比 TCP 的缓存容量小，并且 TCP 缓存可以存放多个包，那么客户端和服务端的一次通信就可能传递了多个包，这时候服务端从 TCP 缓存就可能一下读取了多个包，这种现象就叫<code>粘包</code>。</p><p>上面说的后面那种收到了三条消息<code>AB</code>、<code>CD</code>、<code>EF</code>，类似于半包。如果客户端发送的包的大小比 TCP 的缓存容量大，那么这个数据包就会被分成多个包，通过 Socket 多次发送到服务端，服务端第一次从接受缓存里面获取的数据，实际是整个包的一部分，这时候就产生了<code>半包</code>(半包不是说只收到了全包的一半，是说收到了全包的一部分)。</p><a id="more"></a><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>因为TCP是面向连接的传输协议，TCP传输的数据是以流的形式，而流数据是没有明确的开始结尾边界，所以TCP也没办法判断哪一段流属于一个消息。</p><p><img src="http://image.onebug.tech/1460000021175323" alt="TCP协议传输过程.jpg"></p><p>因为TCP会根据缓冲区的实际情况进行包的划分，在业务上认为，有的包被拆分成多个包进行发送，也可能多个晓小的包封装成一个大的包发送，这就是TCP的粘包或者拆包。</p><p><img src="http://image.onebug.tech/1460000021175317" alt="粘包拆包图解.png"></p><p>假设客户端分别发送了两个数据包D1和D2给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下几种情况：</p><ol><li>服务端分两次读取到两个独立的数据包，分别是D1和D2，没有粘包和拆包。</li><li>服务端一次接收到了两个数据包，D1和D2粘在一起，发生粘包。</li><li>服务端分两次读取到数据包，第一次读取到了完整的D1包和D2包的部分内容，第二次读取到了D2包的剩余内容，发生拆包。</li><li>服务端分两次读取到数据包，第一次读取到部分D1包，第二次读取到剩余的D1包和全部的D2包。</li></ol><p>当TCP缓存再小一点的话，会把D1和D2分别拆成多个包发送。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决半包粘包的问题其实就是定义消息边界的问题。因为TCP只负责数据发送，并不处理业务上的数据，所以只能在上层应用协议栈解决，目前的解决方案归纳：</p><ol><li>消息定长，每个报文的大小固定，如果数据不够，空位补空格。</li><li>在包的尾部加回车换行符标识。</li><li>将消息分为消息头与消息体，消息头中包含消息总长度。</li><li>设计更复杂的协议。</li></ol><h1 id="Netty解决方案"><a href="#Netty解决方案" class="headerlink" title="Netty解决方案"></a>Netty解决方案</h1><h2 id="LineBasedFrameDecoder"><a href="#LineBasedFrameDecoder" class="headerlink" title="LineBasedFrameDecoder"></a>LineBasedFrameDecoder</h2><p>基于回车换行符的解码器，当遇到”n”或者 “rn”结束符时，分为一组。支持携带结束符或者不带结束符两种编码方式，也支持配置单行的最大长度。</p><h2 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h2><p>分隔符解码器，可以指定消息结束的分隔符，它可以自动完成以分隔符作为码流结束标识的消息的解码。回车换行解码器实际上是一种特殊的DelimiterBasedFrameDecoder解码器。</p><h2 id="FixedLengthFrameDecoder"><a href="#FixedLengthFrameDecoder" class="headerlink" title="FixedLengthFrameDecoder"></a>FixedLengthFrameDecoder</h2><p>固定长度解码器，它能够按照指定的长度对消息进行自动解码,当制定的长度过大，消息过短时会有资源浪费，但是使用起来简单。</p><h2 id="LengthFieldBasedFrameDecoder"><a href="#LengthFieldBasedFrameDecoder" class="headerlink" title="LengthFieldBasedFrameDecoder"></a>LengthFieldBasedFrameDecoder</h2><p>通用解码器，一般协议头中带有长度字段，通过使用LengthFieldBasedFrameDecoder传入特定的参数，来解决拆包粘包。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;粘包、半包&quot;&gt;&lt;a href=&quot;#粘包、半包&quot; class=&quot;headerlink&quot; title=&quot;粘包、半包&quot;&gt;&lt;/a&gt;粘包、半包&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;在网络传输中，粘包和半包应该是最常出现的问题。&lt;/p&gt;
&lt;p&gt;TCP 传输中，客户端发送数据，实际是把数据写入到了 TCP 的缓存中，粘包和半包也就会在此时产生。&lt;/p&gt;
&lt;p&gt;客户端给服务端发送了两条消息&lt;code&gt;ABC&lt;/code&gt;和&lt;code&gt;DEF&lt;/code&gt;，服务端这边的接收会有多少种情况呢？有可能是一次性收到了所有的消息&lt;code&gt;ABCDEF&lt;/code&gt;，有可能是收到了三条消息&lt;code&gt;AB&lt;/code&gt;、&lt;code&gt;CD&lt;/code&gt;、&lt;code&gt;EF&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上面所说的一次性收到了所有的消息&lt;code&gt;ABCDEF&lt;/code&gt;，类似于粘包。如果客户端发送的包的大小比 TCP 的缓存容量小，并且 TCP 缓存可以存放多个包，那么客户端和服务端的一次通信就可能传递了多个包，这时候服务端从 TCP 缓存就可能一下读取了多个包，这种现象就叫&lt;code&gt;粘包&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上面说的后面那种收到了三条消息&lt;code&gt;AB&lt;/code&gt;、&lt;code&gt;CD&lt;/code&gt;、&lt;code&gt;EF&lt;/code&gt;，类似于半包。如果客户端发送的包的大小比 TCP 的缓存容量大，那么这个数据包就会被分成多个包，通过 Socket 多次发送到服务端，服务端第一次从接受缓存里面获取的数据，实际是整个包的一部分，这时候就产生了&lt;code&gt;半包&lt;/code&gt;(半包不是说只收到了全包的一半，是说收到了全包的一部分)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="netty" scheme="http://www.onebug.tech/categories/netty/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="netty" scheme="http://www.onebug.tech/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty的责任链</title>
    <link href="http://www.onebug.tech/2021/09/05/java/netty/pipeline%E5%92%8CchannelHandler/"/>
    <id>http://www.onebug.tech/2021/09/05/java/netty/pipeline%E5%92%8CchannelHandler/</id>
    <published>2021-09-04T16:00:00.000Z</published>
    <updated>2021-09-05T13:41:59.018Z</updated>
    
    <content type="html"><![CDATA[<p>为了避免逻辑判断泛滥导致的拓展性受限问题，Netty 发明了 <code>pipeline</code> 和 <code>channelHandler</code> 。它通过<strong>责任链设计模式</strong>来组织代码逻辑，并且能够支持逻辑的动态添加和删除 ，Netty 能够支持各类协议的扩展，比如 HTTP，WebSocket，Redis，靠的就是 <code>pipeline</code> 和 <code>channelHandler</code>。</p><a id="more"></a><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="http://image.onebug.tech/image-20210905211158604.png" alt="image-20210905211158604"></p><p>在 Netty 整个框架里面，一条连接对应着一个 <code>Channel</code>，这条 <code>Channel</code> 所有的处理逻辑都在一个叫做 <code>ChannelPipeline</code> 的对象里面，<code>ChannelPipeline</code> 是一个双向链表结构，他和 <code>Channel</code> 之间是一对一的关系。</p><p><code>ChannelPipeline</code> 里面每个节点都是一个 <code>ChannelHandlerContext</code> 对象，这个对象能够拿到和 Channel 相关的所有的上下文信息，然后这个对象包着一个重要的对象，那就是逻辑处理器 <code>ChannelHandler</code>。</p><h1 id="channelHandler-家族"><a href="#channelHandler-家族" class="headerlink" title="channelHandler 家族"></a>channelHandler 家族</h1><p><img src="http://image.onebug.tech/image-20210905211319568.png" alt="image-20210905211319568"></p><p>入站操作和数据由 <code>ChannelInboundHandler</code>处理。 在开始组装响应之前的所有的逻辑，都可以放置在 <code>ChannelInboundHandler</code> 里处理，它的一个最重要的方法就是 <code>channelRead()</code>。比如，我们在一端读到一段数据，首先要解析这段数据，然后对这些数据做一系列逻辑处理，最终把响应写到对端。</p><p>出站操作和数据将由<code>ChannelOutboundHandler</code> 处理。它是定义我们一端在组装完响应之后，把数据写到对端的逻辑，它里面最核心的一个方法就是 <code>write()</code>。比如，我们封装好一个 <code>response</code> 对象，接下来我们有可能对这个 <code>response</code> 做一些其他的特殊逻辑，然后，再编码成 <code>ByteBuf</code>，最终写到对端。</p><p>这两个子接口分别有对应的默认实现，<code>ChannelInboundHandlerAdapter</code>和 <code>ChanneloutBoundHandlerAdapter</code>，它们分别实现了两大接口的所有功能，默认情况下会把读写事件传播到下一个 <code>handler</code>。</p><h1 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h1><p>Netty通过<strong>责任链设计模式</strong>来组织代码逻辑，所谓的事件传播其实就是事件在<code>ChannelPipeline</code>上移动。</p><p>可以看到<code>ChannelPipeline</code>是由一系列<code>ChannelHandlers</code>组成，其还提供了通过自身传播事件的方法，<strong>当进站事件触发时，其从<code>ChannelPipeline</code>的头部传递到尾部，而出站事件会从右边传递到左边。</strong></p><p>当管道传播事件时，其会确定下一个<code>ChannelHandler</code>的类型是否与移动方向匹配，若不匹配，则会跳过并寻找下一个，直至找到相匹配的<code>ChannelHandler</code>（一个处理器可以会同时实现<code>ChannelInboundHandler</code>和<code>ChannelOutboundHandler</code>）。</p><p><img src="http://image.onebug.tech/616953-20170524202716435-790612436.png" alt="img"></p><p>关于<code>ChannelInboundHandler</code> 和<code>ChanneloutBoundHandler</code>的传播顺序的不同，可以看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap</span><br><span class="line">        .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// inBound，处理读数据的逻辑链</span></span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerA());</span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerB());</span><br><span class="line">                </span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> OutBoundHandlerD());</span><br><span class="line"></span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerC());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// outBound，处理写数据的逻辑链</span></span><br><span class="line">                ch.pipeline().addLast(<span class="keyword">new</span> OutBoundHandlerE());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>在该例子中，<code>pipeline</code> 的执行顺序是：<code>InBoundHandlerA</code>-&gt;<code>InBoundHandlerB()</code>-&gt;<code>InBoundHandlerC()</code>-&gt;<code>OutBoundHandlerE()</code></p><blockquote><p><code>channelPipeline</code>是双向链表，<code>inBoundHandler</code> 的事件通常只会传播到下一个 <code>inBoundHandler</code>，<code>outBoundHandler</code> 的事件通常只会传播到下一个 <code>outBoundHandler</code>，两者相互不受干扰。</p></blockquote><p><code>inBoundHandler</code> 的执行顺序与我们实际的添加顺序相同，而 <code>outBoundHandler</code> 则相反。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了避免逻辑判断泛滥导致的拓展性受限问题，Netty 发明了 &lt;code&gt;pipeline&lt;/code&gt; 和 &lt;code&gt;channelHandler&lt;/code&gt; 。它通过&lt;strong&gt;责任链设计模式&lt;/strong&gt;来组织代码逻辑，并且能够支持逻辑的动态添加和删除 ，Netty 能够支持各类协议的扩展，比如 HTTP，WebSocket，Redis，靠的就是 &lt;code&gt;pipeline&lt;/code&gt; 和 &lt;code&gt;channelHandler&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="netty" scheme="http://www.onebug.tech/categories/netty/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="netty" scheme="http://www.onebug.tech/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty的字节容器---ByteBuf</title>
    <link href="http://www.onebug.tech/2021/09/04/java/netty/ByteBuf/"/>
    <id>http://www.onebug.tech/2021/09/04/java/netty/ByteBuf/</id>
    <published>2021-09-03T16:00:00.000Z</published>
    <updated>2021-09-05T12:36:12.806Z</updated>
    
    <content type="html"><![CDATA[<p>网络数据的基本单位总是字节。Java NIO 提供了<code>ByteBuffer</code> 作为它的字节容器，但是这个类使用起来过于复杂，而且也有些繁琐。Netty 的<code>ByteBuffer</code> 替代品是<code>ByteBuf</code>，一个强大的实现，既解决了JDK API 的局限性，又为网络应用程序的开发者提供了更好的API。<code>ByteBuf</code>本质的原理就是引用了一段内存，这段内存可以是堆内也可以是堆外的，然后用引用计数来控制这段内存是否需要被释放，使用读写指针来控制对 <code>ByteBuf</code> 的读写，可以理解为是外观模式的一种使用。</p><a id="more"></a><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><p><img src="http://image.onebug.tech/image-20210903174536572.png" alt="image-20210903174536572"></p><ul><li><p><code>ByteBuf</code> 是一个字节容器，容器里面的的数据分为三个部分，第一个部分是已经丢弃的字节，这部分数据是无效的；第二部分是可读字节，这部分数据是 <code>ByteBuf</code> 的主体数据， 从 <code>ByteBuf</code> 里面读取的数据都来自这一部分;最后一部分的数据是可写字节，所有写到 <code>ByteBuf</code> 的数据都会写到这一段。</p></li><li><p>以上三段内容是被两个指针给划分出来的，从左到右，依次是读指针（<code>readerIndex</code>）、写指针（<code>writerIndex</code>），然后还有一个变量 <code>capacity</code>，表示 <code>ByteBuf</code> 底层内存的总容量。</p></li><li><p>从 <code>ByteBuf</code> 中每读取一个字节，<code>readerIndex</code> 自增1，<code>ByteBuf</code> 里面总共有 <code>writerIndex-readerIndex</code> 个字节可读, 由此可以推论出当 <code>readerIndex</code> 与 <code>writerIndex</code> 相等的时候，<code>ByteBuf</code> 不可读。</p></li><li><p>写数据是从 <code>writerIndex</code> 指向的部分开始写，每写一个字节，<code>writerIndex</code> 自增1，直到增到 <code>capacity</code>，这个时候，表示 <code>ByteBuf</code> 已经不可写了</p></li></ul><blockquote><p><code>ByteBuf</code> 里面其实还有一个参数 <code>maxCapacity</code>，当向 <code>ByteBuf</code> 写数据的时候，如果容量不足，那么这个时候可以进行扩容，直到 <code>capacity</code> 扩容到 <code>maxCapacity</code>，超过 <code>maxCapacity</code> 就会报错</p></blockquote><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="容量"><a href="#容量" class="headerlink" title="容量"></a>容量</h2><table><thead><tr><th>名 称</th><th>描 述</th></tr></thead><tbody><tr><td>capacity()</td><td>表示 <code>ByteBuf</code> 底层占用了多少字节的内存（包括丢弃的字节、可读字节、可写字节）</td></tr><tr><td>maxCapacity()</td><td>表示 <code>ByteBuf</code> 底层最大能够占用多少字节的内存，当向 <code>ByteBuf</code> 中写数据的时候，如果发现容量不足，则进行扩容，直到扩容到 <code>maxCapacity</code>，超过这个数，就抛异常</td></tr><tr><td>readableBytes()</td><td>表示 ByteBuf 当前可读的字节数，它的值等于 <code>writerIndex-readerIndex</code>，如果两者相等，则不可读，<code>isReadable()</code> 方法返回 <code>false</code></td></tr><tr><td>writableBytes()</td><td><code>ByteBuf</code> 当前可写的字节数，它的值等于 capacity-writerIndex，如果两者相等，则表示不可写，<code>isWritable()</code> 返回 <code>false</code>，但是这个时候，并不代表不能往 <code>ByteBuf</code> 中写数据了， 如果发现往 <code>ByteBuf</code> 中写数据写不进去的话，Netty 会自动扩容 <code>ByteBuf</code>，直到扩容到底层的内存大小为 <code>maxCapacity</code>，而 <code>maxWritableBytes()</code> 就表示可写的最大字节数，它的值等于 <code>maxCapacity-writerIndex</code></td></tr></tbody></table><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><table><thead><tr><th>名 称</th><th>描 述</th></tr></thead><tbody><tr><td>readerIndex()</td><td>返回当前的读指针</td></tr><tr><td>writeIndex()</td><td>返回当前的写指针</td></tr><tr><td>markReaderIndex()</td><td>把当前的读指针保存起来</td></tr><tr><td>resetReaderIndex()</td><td>把当前的读指针恢复到之前保存的值</td></tr></tbody></table><h2 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h2><p>有两种类别的读/写操作：</p><ul><li><code>get()</code>和<code>set()</code>操作，从给定的索引开始，并且保持索引不变；</li><li><code>read()</code>和<code>write()</code>操作，从给定的索引开始，并且会根据已经访问过的字节数对索引进行调整。</li></ul><p>基于读写指针和容量、最大可扩容容量，衍生出一系列的读写方法。其中比较重要的有：</p><table><thead><tr><th>名 称</th><th>描 述</th></tr></thead><tbody><tr><td>readByte()</td><td>返回当前<code>readerIndex</code> 处的字节，并将<code>readerIndex</code> 增加1（从 <code>ByteBuf</code> 中读取一个字节）</td></tr><tr><td>writeByte(int)</td><td>在当前<code>writerIndex</code> 处写入一个字节值，并将<code>writerIndex</code> 增加1（往 <code>ByteBuf</code> 中写一个字节）</td></tr><tr><td>readBytes(destination byte[])</td><td>把 <code>ByteBuf</code> 里面的数据全部读取到 <code>destination</code>（<code>ByteBuf</code>-&gt;<code>destination</code>）</td></tr><tr><td>writeBytes(source byte[])</td><td>把字节数组 <code>source</code> 里面的数据写到 <code>ByteBuf</code>（<code>source</code>-&gt;<code>ByteBuf</code>）</td></tr></tbody></table><p>类似的 API 还有 <code>writeBoolean()</code>、<code>writeChar()</code>、<code>writeShort()</code>、<code>writeInt()</code>、<code>writeLong()</code>、<code>writeFloat()</code>、<code>writeDouble()</code> 与 <code>readBoolean()</code>、<code>readChar()</code>、<code>readShort()</code>、<code>readInt()</code>、<code>readLong()</code>、<code>readFloat()</code>、<code>readDouble()</code> ，这里就不一一赘述了。</p><h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>由于 Netty 可以使用堆外内存，而堆外内存是不被 <code>jvm</code> 直接管理的，也就是说申请到的内存无法被垃圾回收器直接回收，所以需要我们手动回收，否则会造成内存泄漏。Netty 的 <code>ByteBuf</code> 是通过<strong>引用计数</strong>的方式管理的，如果一个 <code>ByteBuf</code> 没有地方被引用到，需要回收底层内存。默认情况下，当创建完一个 <code>ByteBuf</code>，它的引用为1，然后每次调用 <code>retain()</code> 方法， 它的引用就<code>+1</code>， release() 方法原理是将引用计数<code>-1</code>，减完之后如果发现引用计数为0，则直接回收 <code>ByteBuf</code> 底层的内存。</p><h2 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h2><p>为了降低分配和释放内存的开销，Netty 通过 <code>ByteBufAllocator</code> 实现了<code>ByteBuf</code> 的池化，它可以用来分配我们所描述过的任意类型的<code>ByteBuf</code> 实例（直接内存、堆内存）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从Channel 获取一个到 ByteBufAllocator 的引用</span></span><br><span class="line">ByteBufAllocator allocator = channel.alloc();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从ChannelHandlerContext 获取一个到ByteBufAllocator 的引用</span></span><br><span class="line">ByteBufAllocator allocator2 = ctx.alloc();</span><br></pre></td></tr></table></figure><p>一般使用<code>buffer(int initialCapacity, int maxCapacity);</code>返回一个基于堆或者直接内存存储的<code>ByteBuf</code>。</p><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p><code>slice()</code>、<code>duplicate()</code>、<code>copy()</code>三者的返回值都是一个新的 <code>ByteBuf</code> 对象：</p><ul><li><p><code>slice()</code> 方法从原始 <code>ByteBuf</code> 中截取一段，这段数据是从 <code>readerIndex</code> 到 <code>writeIndex</code>，同时，返回的新的 <code>ByteBuf</code> 的最大容量 <code>maxCapacity</code> 为原始 <code>ByteBuf</code> 的 <code>readableBytes()</code></p></li><li><p><code>duplicate()</code> 方法把整个 <code>ByteBuf</code> 都截取出来，包括所有的数据，指针信息</p><blockquote><p><code>slice()</code> 方法与 <code>duplicate()</code> 方法不会拷贝数据，它们只是通过改变读写指针来改变读写的行为。底层内存以及引用计数与原始的 <code>ByteBuf</code> 共享，也就是说返回的 <code>ByteBuf</code> 调用 <code>write</code> 系列方法都会影响到原始的 <code>ByteBuf</code>，但是它们都维持着与原始 <code>ByteBuf</code> 不同的读写指针。</p></blockquote></li><li><p><code>copy()</code> 会直接从原始的 <code>ByteBuf</code> 中拷贝所有的信息，包括读写指针以及<strong>底层对应的数据</strong>，因此， <code>copy()</code> 返回的 <code>ByteBuf</code> 中写数据不会影响到原始的 <code>ByteBuf</code></p></li><li><p><code>retainedSlice()</code> 与 <code>retainedDuplicate()</code>它们的作用是在截取内存片段的同时，增加内存的引用计数。</p></li></ul><p>多个 <code>ByteBuf</code> 可以引用同一段内存，而Netty会通过引用计数来控制内存的释放，应当遵循谁 <code>retain()</code> 谁 <code>release()</code> 的原则。我们建议，在一个函数体里面，只要增加了引用计数（包括 <code>ByteBuf</code> 的创建和手动调用 <code>retain()</code> 方法），就必须调用 <code>release()</code> 方法，否则往往会出现内存泄露的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络数据的基本单位总是字节。Java NIO 提供了&lt;code&gt;ByteBuffer&lt;/code&gt; 作为它的字节容器，但是这个类使用起来过于复杂，而且也有些繁琐。Netty 的&lt;code&gt;ByteBuffer&lt;/code&gt; 替代品是&lt;code&gt;ByteBuf&lt;/code&gt;，一个强大的实现，既解决了JDK API 的局限性，又为网络应用程序的开发者提供了更好的API。&lt;code&gt;ByteBuf&lt;/code&gt;本质的原理就是引用了一段内存，这段内存可以是堆内也可以是堆外的，然后用引用计数来控制这段内存是否需要被释放，使用读写指针来控制对 &lt;code&gt;ByteBuf&lt;/code&gt; 的读写，可以理解为是外观模式的一种使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="netty" scheme="http://www.onebug.tech/categories/netty/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="ByteBuf" scheme="http://www.onebug.tech/tags/ByteBuf/"/>
    
      <category term="netty" scheme="http://www.onebug.tech/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>java UDP网络编程</title>
    <link href="http://www.onebug.tech/2021/05/08/java/javaIO/java%20UDP/"/>
    <id>http://www.onebug.tech/2021/05/08/java/javaIO/java%20UDP/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-05-08T09:58:08.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>在 TCP/IP 协议的传输层除了一个 TCP 协议之外，还有一个 UDP 协议。UDP 协议是用户数据报协议的简称，也用于网络数据的传输。虽然 UDP 协议是一种不太可靠的协议，但有时在需要较快地接收数据并且可以忍受较小错误的情况下，UDP 就会表现出更大的优势。</p><p>下面是在 <a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 中使用 UDP 协议发送数据的步骤。</p><ol><li>使用 DatagramSocket() 创建一个数据包套接字。</li><li>使用 DatagramPacket() 创建要发送的数据包。</li><li>使用 DatagramSocket 类的 send() 方法发送数据包。</li></ol><p>接收 UDP 数据包的步骤如下：</p><ul><li>使用 DatagramSocket 创建数据包套接字，并将其绑定到指定的端口。</li><li>使用 DatagramPacket 创建字节数组来接收数据包。</li><li>使用 DatagramPacket 类的 receive() 方法接收 UDP 包。</li></ul><a id="more"></a><h2 id="DatagramPacket-类"><a href="#DatagramPacket-类" class="headerlink" title="DatagramPacket 类"></a>DatagramPacket 类</h2><p>java.net 包中的 DatagramPacket 类用来表示数据报包，数据报包用来实现无连接包投递服务。每条报文仅根据该包中包含的信息从一台机器路由到另一台机器。从一台机器发送到另一台机器的多个包可能选择不同的路由，也可能按不同的顺序到达。</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>DatagramPacket(byte[] buf,int length)</td><td>构造 DatagramPacket，用来接收长度为 length 的数据包。</td></tr><tr><td>DatagramPacket(byte[] buf,int offset, int length)</td><td>构造 DatagramPacket，用来接收长度为 length 的包，在缓 冲区中指定了偏移量。</td></tr><tr><td>DatagramPacket(byte[] buf,int length, InetAddress address,int port)</td><td>构造 DatagramPacket，用来将长度为 length 的包发送到指定主机上的指定端口。</td></tr><tr><td>DatagramPacket(byte[] buf,int length, SocketAddress address)</td><td>构造数据报包，用来将长度为 length 的包发送到指定主机上 的指定端口。</td></tr><tr><td>DatagramPacket(byte[] buf,int offset, int length,InetAddress address,int port)</td><td>构造 DatagramPacket，用来将长度为 length 偏移量为 offset 的包发送到指定主机上的指定端口。</td></tr><tr><td>DatagramPacket(byte[] buf,int offset, int length,SocketAddress address)</td><td>构造数据报包，用来将长度为 length、偏移量为 offset 的包发 送到指定主机上的指定端口。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>InetAddress getAddress()</td><td>返回某台机器的 IP 地址，此数据报将要发往该机器或者 从该机器接收。</td></tr><tr><td>byte[] getData()</td><td>返回数据缓冲区。</td></tr><tr><td>int getLength()</td><td>返回将要发送或者接收的数据的长度。</td></tr><tr><td>int getOffset()</td><td>返回将要发送或者接收的数据的偏移量。</td></tr><tr><td>int getPort()</td><td>返回某台远程主机的端口号，此数据报将要发往该主机或 者从该主机接收。</td></tr><tr><td>getSocketAddress()</td><td>获取要将此包发送或者发出此数据报的远程主机的 SocketAddress（通常为 IP地址+端口号）。</td></tr><tr><td>void setAddress(InetAddress addr)</td><td>设置要将此数据报发往的目的机器的IP地址。</td></tr><tr><td>void setData(byte[] buf)</td><td>为此包设置数据缓冲区。</td></tr><tr><td>void setData(byte[] buf,int offset, int length)</td><td>为此包设置数据缓冲区。</td></tr><tr><td>void setLength(int length)</td><td>为此包设置长度。</td></tr><tr><td>void setPort(int port)</td><td>设置要将此数据报发往的远程主机的端口号。</td></tr><tr><td>void setSocketAddress(SocketAddress address)</td><td>设置要将此数据报发往的远程主机的 SocketAddress（通常为 IP地址+端口号）。</td></tr></tbody></table><h2 id="DatagramSocket-类"><a href="#DatagramSocket-类" class="headerlink" title="DatagramSocket 类"></a>DatagramSocket 类</h2><p>DatagramSocket 类用于表示发送和接收数据报包的套接字。数据报包套接字是包投递服务的发送或接收点。每个在数据报包套接字上发送或接收的包都是单独编址和路由的。从一台机器发送到另一台机器的多个包可能选择不同的路由，也可能按不同的顺序到达。</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>构造数据报包套接字并将其绑定到本地主机上任何可用的端口。</td></tr><tr><td>DatagramSocket(int port)</td><td>创建数据报包套接字并将其绑定到本地主机上的指定端口。</td></tr><tr><td>DatagramSocket(int port,InetAddressaddr)</td><td>创建数据报包套接字，将其绑定到指定的本地地址。</td></tr><tr><td>DatagramSocket(SocketAddress,bindaddr)</td><td>创建数据报包套接字，将其绑定到指定的本地套接字地址。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void bind(SocketAddress addr)</td><td>将此 DatagramSocket 绑定到特定的地址和端口。</td></tr><tr><td>void close()</td><td>关闭此数据报包套接字。</td></tr><tr><td>void connect(InetAddress address,int port)</td><td>将套接字连接到此套接字的远程地址。</td></tr><tr><td>void connect(SocketAddress addr)</td><td>将此套接子连接到远程套接子地址（IP地址+端口号）。</td></tr><tr><td>void disconnect()</td><td>断开套接字的连接。</td></tr><tr><td>InetAddress getInetAddress()</td><td>返回此套接字连接的地址。</td></tr><tr><td>InetAddress getLocalAddress()</td><td>获取套接字绑定的本地地址。</td></tr><tr><td>int getLocalPort()</td><td>返回此套接字绑定的本地主机上的端口号。</td></tr><tr><td>int getPort()</td><td>返回此套接字的端口。</td></tr></tbody></table><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>编写 UDP 程序，要求客户端程序可以向服务器端发送多条数据，服务器端程序可以接收客户端发送的多条数据并将其信息输出在控制台，主要步骤如下所示。</p><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            DatagramSocket udpScoket=<span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            InetAddress serverAddress=InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="keyword">int</span> serverPort=<span class="number">8082</span>;</span><br><span class="line"></span><br><span class="line">            DatagramPacket udPacket=<span class="keyword">null</span>;</span><br><span class="line">            String[] messages=&#123;<span class="string">"YOLO"</span>,<span class="string">"HELLO"</span>,<span class="string">"JUST DO IT"</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (String message:messages)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data=message.getBytes();</span><br><span class="line">                udPacket=<span class="keyword">new</span> DatagramPacket(data,data.length,serverAddress,serverPort);</span><br><span class="line">                udpScoket.send(udPacket);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            udpScoket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException | InterruptedException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            DatagramSocket ds=<span class="keyword">new</span> DatagramSocket(<span class="number">8082</span>);</span><br><span class="line">            System.out.println(<span class="string">"UDP服务器已启动。。。"</span>);</span><br><span class="line">            DatagramPacket dpReceive;</span><br><span class="line">            <span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span>(ds.isClosed()==<span class="keyword">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dpReceive=<span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ds.receive(dpReceive);</span><br><span class="line">                    <span class="keyword">byte</span>[] Data=dpReceive.getData();</span><br><span class="line">                    <span class="keyword">int</span> len=Data.length;</span><br><span class="line">                    System.out.println(<span class="string">"UDP客户端"</span>+dpReceive.getSocketAddress()+<span class="string">"发送的内容是："</span> + <span class="keyword">new</span> String(Data, <span class="number">0</span>, len).trim());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(IOException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(SocketException e1)</span><br><span class="line">        &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UDP服务器已启动。。。</span><br><span class="line">UDP客户端&#x2F;127.0.0.1:64656发送的内容是：YOLO                             </span><br><span class="line">UDP客户端&#x2F;127.0.0.1:64656发送的内容是：HELLO                                             </span><br><span class="line">UDP客户端&#x2F;127.0.0.1:64656发送的内容是：JUST DO IT</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h1&gt;&lt;p&gt;在 TCP/IP 协议的传输层除了一个 TCP 协议之外，还有一个 UDP 协议。UDP 协议是用户数据报协议的简称，也用于网络数据的传输。虽然 UDP 协议是一种不太可靠的协议，但有时在需要较快地接收数据并且可以忍受较小错误的情况下，UDP 就会表现出更大的优势。&lt;/p&gt;
&lt;p&gt;下面是在 &lt;a href=&quot;http://c.biancheng.net/java/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt; 中使用 UDP 协议发送数据的步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 DatagramSocket() 创建一个数据包套接字。&lt;/li&gt;
&lt;li&gt;使用 DatagramPacket() 创建要发送的数据包。&lt;/li&gt;
&lt;li&gt;使用 DatagramSocket 类的 send() 方法发送数据包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接收 UDP 数据包的步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 DatagramSocket 创建数据包套接字，并将其绑定到指定的端口。&lt;/li&gt;
&lt;li&gt;使用 DatagramPacket 创建字节数组来接收数据包。&lt;/li&gt;
&lt;li&gt;使用 DatagramPacket 类的 receive() 方法接收 UDP 包。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="IO" scheme="http://www.onebug.tech/tags/IO/"/>
    
      <category term="网络编程" scheme="http://www.onebug.tech/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="UDP" scheme="http://www.onebug.tech/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>JAVA NIO</title>
    <link href="http://www.onebug.tech/2021/05/08/java/javaIO/java%20NIO%E4%B8%8ESelector/"/>
    <id>http://www.onebug.tech/2021/05/08/java/javaIO/java%20NIO%E4%B8%8ESelector/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-05-08T09:56:19.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java NIO 由以下几个核心部分组成：</p><ul><li>Channels</li><li>Buffers</li><li>Selectors</li></ul><p>虽然Java NIO 中除此之外还有很多类和组件，但在我看来，Channel，Buffer 和 Selector 构成了核心的API。其它组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。</p><p>基本上，所有的 IO 在NIO 中都从一个Channel 开始。Channel，国内大多翻译成“通道”，有点像流。 不同的是，数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。</p><p>Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。</p><a id="more"></a><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p><strong>发送给一个通道的所有数据都必须首先放到缓冲区中，同样地，从通道中读取的任何数据都要先读到缓冲区中</strong>。也就是说，不会直接对通道进行读写数据，而是要先经过缓冲区。缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>Java NIO 有以下Buffer类型</p><ul><li>ByteBuffer</li><li>MappedByteBuffer</li><li>CharBuffer</li><li>DoubleBuffer</li><li>FloatBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>ShortBuffer</li></ul><p>这些Buffer类型代表了不同的数据类型。换句话说，就是可以通过char，short，int，long，float 或 double类型来操作缓冲区中的字节。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>基本用法</strong></p><p>使用Buffer读写数据一般遵循以下四个步骤：</p><ol><li><p>写入数据到Buffer</p></li><li><p>调用<code>flip()</code>方法，从写模式切换到读模式，在读模式下，可以读取之前写入到buffer的所有数据。</p></li><li><p>从Buffer中读取数据</p></li><li><p>调用<code>clear()</code>方法或者<code>compact()</code>方法，清空缓冲区</p><blockquote><p>clear()方法会清空整个缓冲区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。</p></blockquote></li></ol><p><strong>Buffer的分配</strong></p><p>要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。下面是一个分配48字节capacity的ByteBuffer的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br></pre></td></tr></table></figure><p><strong>向Buffer中写入数据</strong></p><p>写数据到Buffer有两种方式：</p><ul><li><p>从Channel写到Buffer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf); <span class="comment">//read into buffer.</span></span><br></pre></td></tr></table></figure></li><li><p>通过Buffer的put()方法写到Buffer里，put方法有很多版本，允许你以不同的方式把数据写入到Buffer中。例如， 写到一个指定的位置，或者把一个字节数组写入到Buffer。 更多Buffer实现的细节参考JavaDoc。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.put(<span class="number">127</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>读取数据</strong></p><p>从Buffer中读取数据有两种方式：</p><ul><li>从Buffer读取数据到Channel。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//read from buffer into channel.</span></span><br><span class="line"><span class="keyword">int</span> bytesWritten = inChannel.write(buf);</span><br></pre></td></tr></table></figure><ul><li>使用get()方法从Buffer中读取数据，get方法有很多版本，允许你以不同的方式从Buffer中读取数据。例如，从指定position读取，或者从Buffer中读取数据到字节数组。更多Buffer实现的细节参考JavaDoc。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> aByte = buf.get();</span><br></pre></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Buffer简单地理解为一组基本数据类型的元素列表，它通过几个变量来保存这个数据的当前位置状态：</p><table><thead><tr><th><strong>索引</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>capacity</td><td>缓冲区数组的总长度</td></tr><tr><td>position</td><td>下一个要操作的数据元素的位置</td></tr><tr><td>limit</td><td>缓冲区数组中不可操作的下一个元素的位置：limit&lt;=capacity</td></tr></tbody></table><p>状态变量的改变过程举例：</p><p>① 通过<code>ByteBuffer.allocate(8)</code>新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f31626561333938662d313761372d346636372d613930622d3965326432343365616139612e706e67" alt="img"></p><p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 为 5，limit 保持不变。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38303830346635322d383831352d343039362d623530362d3438656566336565643563362e706e67" alt="img"></p><p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip() 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39353265303662642d356136352d346361622d383265342d6464313533363436326633382e706e67" alt="img"></p><p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f62356264636265322d623935382d346165662d393135312d3661643936336362323862342e706e67" alt="img"></p><p>⑤ 最后需要调用 clear() 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f36376266353438372d633435642d343962362d623963302d6130353864386336383930322e706e67" alt="img"></p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>Java NIO的通道类似流，但又有些不同：</p><ul><li>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。</li><li>通道可以异步地读写。</li><li>通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。</li></ul><p>正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p><p><img src="http://image.onebug.tech/overview-channels-buffers.png" alt="img"></p><p>这些是Java NIO中最重要的通道的实现：</p><ul><li>FileChannel 从文件中读写数据</li><li>DatagramChannel 能通过UDP读写网络中的数据</li><li>SocketChannel  能通过TCP读写网络中的数据</li><li>ServerSocketChannel 可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel</li></ul><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><p>Java NIO中的FileChannel是一个连接到文件的通道。可以通过文件通道读写文件。FileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。</p><p><strong>打开</strong></p><p>在使用FileChannel之前，必须先打开它。但是，我们无法直接打开一个FileChannel，需要通过使用一个InputStream、OutputStream或RandomAccessFile来获取一个FileChannel实例。下面是通过RandomAccessFile打开FileChannel的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile aFile &#x3D; new RandomAccessFile(&quot;data&#x2F;nio-data.txt&quot;, &quot;rw&quot;);</span><br><span class="line">FileChannel inChannel &#x3D; aFile.getChannel();</span><br></pre></td></tr></table></figure><p><strong>读取</strong></p><p>打开FileChannel后，调用多个read()方法之一从FileChannel中读取数据。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = inChannel.read(buf);</span><br></pre></td></tr></table></figure><p>首先，分配一个Buffer。从FileChannel中读取的数据将被读到Buffer中。然后，调用<code>FileChannel.read()</code>方法。该方法将数据从FileChannel读取到Buffer中。<strong>read()方法返回的int值表示了有多少字节被读到了Buffer中</strong>。如果返回<strong>-1，表示到了文件末尾</strong>。</p><p><strong>写入</strong></p><p>使用<code>FileChannel.write()</code>方法向FileChannel写数据，该方法的参数是一个Buffer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">channel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意<code>FileChannel.write()</code>是在while循环中调用的。因为无法保证write()方法一次能向FileChannel写入多少字节，因此需要重复调用write()方法，直到Buffer中已经没有尚未写入通道的字节。</p><p><strong>读文件示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nioReadFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">       RandomAccessFile file = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           aFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"test.txt"</span>,<span class="string">"rw"</span>);</span><br><span class="line">           FileChannel fileChannel = aFile.getChannel();</span><br><span class="line">           ByteBuffer buf = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">           <span class="keyword">int</span> bytesRead = fileChannel.read(buf);</span><br><span class="line">           System.out.println(bytesRead);</span><br><span class="line">           <span class="keyword">while</span>(bytesRead != -<span class="number">1</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               buf.flip();</span><br><span class="line">               <span class="keyword">while</span>(buf.hasRemaining())</span><br><span class="line">               &#123;</span><br><span class="line">                   System.out.print((<span class="keyword">char</span>)buf.get());</span><br><span class="line">               &#125;</span><br><span class="line">               buf.compact();</span><br><span class="line">               bytesRead = fileChannel.read(buf);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(aFile != <span class="keyword">null</span>)&#123;</span><br><span class="line">                   aFile.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h3><p>Java NIO中的SocketChannel是一个连接到TCP网络套接字的通道。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>打开</strong></p><p>可以通过以下2种方式创建SocketChannel：</p><ul><li><p>打开一个SocketChannel并连接到互联网上的某台服务器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8081</span>));</span><br></pre></td></tr></table></figure></li><li><p>一个新连接到达ServerSocketChannel时，会创建一个SocketChannel。</p></li></ul><p><strong>从 SocketChannel 读取数据</strong></p><p>要从SocketChannel中读取数据，和FileChannel一样，需要结合Buffer使用，调用read()的方法。以下是例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line"><span class="keyword">int</span> bytesRead = socketChannel.read(buf);</span><br></pre></td></tr></table></figure><p><strong>写入 SocketChannel</strong></p><p>写数据到SocketChannel用的是<code>SocketChannel.write()</code>方法，该方法以一个Buffer作为参数。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"New String to write to file..."</span> + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">buf.clear();</span><br><span class="line">buf.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">    channel.write(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.close();</span><br></pre></td></tr></table></figure><h4 id="非阻塞模式"><a href="#非阻塞模式" class="headerlink" title="非阻塞模式"></a>非阻塞模式</h4><p>NIO的强大功能部分来自于Channel的非阻塞特性，套接字的某些操作可能会无限期地阻塞。例如，对accept()方法的调用可能会因为等待一个客户端连接而阻塞；对read()方法的调用可能会因为没有数据可读而阻塞，直到连接的另一端传来新的数据。总的来说，创建/接收连接或读写数据等I/O调用，都可能无限期地阻塞等待，直到底层的网络实现发生了什么。慢速的，有损耗的网络，或仅仅是简单的网络故障都可能导致任意时间的延迟。然而不幸的是，在调用一个方法之前无法知道其是否阻塞。NIO的channel抽象的一个重要特征就是可以通过配置它的阻塞行为，以实现非阻塞式的信道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(false)</span><br></pre></td></tr></table></figure><p>在非阻塞式信道上调用一个方法总是会立即返回。这种调用的返回值指示了所请求的操作完成的程度：</p><ul><li>非阻塞模式下，write()方法在尚未写出任何内容时可能就返回了。所以需要在循环中调用write()。</li><li>非阻塞模式下,read()方法在尚未读取到任何数据时可能就返回了。所以需要关注它的int返回值，它会告诉你读取了多少字节。</li><li>在非阻塞模式下，调用connect()，该方法可能在连接建立之前就返回了。为了确定连接是否建立，可以调用<code>finishConnect()</code>的方法。</li></ul><p>非阻塞模式与选择器搭配会工作的更好，通过将一或多个SocketChannel注册到Selector，可以询问选择器哪个通道已经准备好了读取，写入等。</p><p><strong>NIO客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">       SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line">           socketChannel = SocketChannel.open();</span><br><span class="line">           socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">           socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"10.10.195.115"</span>,<span class="number">8080</span>));</span><br><span class="line">           <span class="keyword">if</span>(socketChannel.finishConnect())</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">               <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">               &#123;</span><br><span class="line">                   TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                   String info = <span class="string">"I'm "</span>+i+++<span class="string">"-th information from client"</span>;</span><br><span class="line">                   buffer.clear();</span><br><span class="line">                   buffer.put(info.getBytes());</span><br><span class="line">                   buffer.flip();</span><br><span class="line">                   <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">                       System.out.println(buffer);</span><br><span class="line">                       socketChannel.write(buffer);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (IOException | InterruptedException e)</span><br><span class="line">       &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">finally</span>&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(socketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                   socketChannel.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="ServerSocketChannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h3><p>Java NIO中的 ServerSocketChannel 是一个可以监听新进来的TCP连接的通道, 就像标准IO中的ServerSocket一样。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><strong>打开 ServerSocketChannel</strong></p><p>通过调用 <code>ServerSocketChannel.open()</code> 方法来打开ServerSocketChannel.如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br></pre></td></tr></table></figure><p><strong>监听连接</strong></p><p>通过 <code>ServerSocketChannel.accept()</code> 方法监听新进来的连接。当 accept()方法返回的时候,它返回一个包含新进来的连接的 SocketChannel。因此, accept()方法会一直阻塞到有新连接到达。</p><p>通常不会仅仅只监听一个连接,在while循环中调用 accept()方法. 如下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel =</span><br><span class="line">            serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//do something with socketChannel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServerSocketChannel可以设置成非阻塞模式。在非阻塞模式下，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。 因此，需要检查返回的SocketChannel是否是null.如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    SocketChannel socketChannel =</span><br><span class="line">            serverSocketChannel.accept();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(socketChannel != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//do something with socketChannel...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关闭 ServerSocketChannel</strong></p><p>通过调用<code>ServerSocketChannel.close()</code> 方法来关闭</p><h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><p>对于操作系统来说，线程之间上下文切换的开销很大，而且每个线程都要占用系统的一些资源（如内存）。Selector（选择器）能够检测一到多个NIO通道，并能够知晓通道是否为诸如读写事件做好准备的组件。一个单独的线程可以管理多个channel，从而管理多个网络连接。Selector类可以用于避免使用阻塞式客户端中很浪费资源的“忙等”方法。</p><p><img src="http://image.onebug.tech/overview-selectors.png" alt="img"></p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p><strong>创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br></pre></td></tr></table></figure><p><strong>向Selector注册通道</strong><br>为了将Channel和Selector配合使用，必须将channel注册到selector上。通过<code>SelectableChannel.register()</code>方法来实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">SelectionKey key = channel.register(selector,Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure><p>与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以。</p><p>注意register()方法的第二个参数。这是一个“interest集合”，意思是在通过Selector监听Channel时对什么事件感兴趣。通道触发了一个事件意思是该事件已经就绪，可以监听四种不同类型的事件：</p><ul><li><code>SelectionKey.OP_CONNECT</code> ： 某个channel成功连接到另一个服务器称为“连接就绪”</li><li><code>SelectionKey.OP_ACCEPT</code>：一个ServerSocketchannel准备好接收新进入的连接称为“接收就绪”。</li><li><code>SelectionKey.OP_READ</code>：一个有数据可读的通道可以说是“读就绪”。</li><li><code>SelectionKey.OP_WRITE</code>：等待写数据的通道可以说是“写就绪”。</li></ul><p>如果你对不止一种事件感兴趣，那么可以用“位或”操作符将常量连接起来，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure><p><strong>通过Selector选择通道</strong></p><p>一旦向Selector注册了一或多个通道，就可以调用几个重载的select()方法。这些方法返回你所感兴趣的事件（如连接、接受、读或写）已经准备就绪的那些通道。换句话说，如果你对“读就绪”的通道感兴趣，select()方法会返回读事件已经就绪的那些通道。</p><ul><li>int select()：阻塞到至少有一个通道在你注册的事件上就绪了。</li><li>int select(long timeout)：和select()一样，除了最长会阻塞timeout毫秒(参数)。</li><li>int selectNow()：不会阻塞，不管什么通道就绪都立刻返回</li></ul><p><strong>获取已选择键值</strong></p><p>一旦调用了select()方法，并且返回值表明有一个或更多个通道就绪了，然后可以通过调用selector的<code>selectedKeys()</code>方法，访问“已选择键集（selected key set）”中的就绪通道。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set selectedKeys = selector.selectedKeys();</span><br></pre></td></tr></table></figure><p>当像Selector注册Channel时，<code>Channel.register()</code>方法会返回一个SelectionKey 对象。这个对象代表了注册到该Selector的通道（token）。可以通过SelectionKey的selectedKeySet()方法访问这些对象。</p><p>可以遍历这个已选择的键集合来访问就绪的通道。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Set selectedKeys = selector.selectedKeys();</span><br><span class="line">Iterator keyIterator = selectedKeys.iterator();</span><br><span class="line"><span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = keyIterator.next();</span><br><span class="line">    <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was accepted by a ServerSocketChannel.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// a connection was established with a remote server.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for reading</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// a channel is ready for writing</span></span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个循环遍历已选择键集中的每个键，并检测各个键所对应的通道的就绪事件。注意每次迭代末尾的<code>keyIterator.remove()</code>调用。Selector不会自己从已选择键集中移除SelectionKey实例。必须在处理完通道时自己移除，否则下次该通道变成就绪时，Selector会再次将其放入已选择键集中。</p><h3 id="SelectionKey"><a href="#SelectionKey" class="headerlink" title="SelectionKey"></a>SelectionKey</h3><p>当向Selector注册Channel时，register()方法会返回一个SelectionKey对象，代表SelectableChannel与Selector的注册的token。这个对象包含了一些属性：</p><ul><li>interest集合</li><li>ready集合</li><li>Channel</li><li>Selector</li><li>附加的对象（可选）</li></ul><p><strong>interest</strong></p><p>interest集合是你所选择的感兴趣的事件集合。可以通过SelectionKey读写interest集合，像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = selectionKey.interestOps();</span><br><span class="line"><span class="keyword">boolean</span> isInterestedInConnect = interestSet &amp; SelectionKey.OP_CONNECT;</span><br></pre></td></tr></table></figure><p><strong>ready集合</strong></p><p>ready 集合是通道已经准备就绪的操作的集合。在一次选择(Selection)之后，你会首先访问这个ready set。Selection将在下一小节进行解释。可以这样访问ready集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int readySet &#x3D; selectionKey.readyOps();</span><br></pre></td></tr></table></figure><p>可以用像检测interest集合那样的方法，来检测channel中什么事件或操作已经就绪。但是，也可以使用以下四个方法，它们都会返回一个布尔类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.isAcceptable();</span><br><span class="line">selectionKey.isConnectable();</span><br><span class="line">selectionKey.isReadable();</span><br><span class="line">selectionKey.isWritable();</span><br></pre></td></tr></table></figure><p><strong>Channel、Selector</strong></p><p>从SelectionKey访问对应的Channel和Selector很简单。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Channel  channel  = selectionKey.channel();</span><br><span class="line">Selector selector = selectionKey.selector();</span><br></pre></td></tr></table></figure><p><strong>附加对象</strong></p><p>可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。例如，可以附加 与通道一起使用的Buffer，或是包含聚集数据的某个对象。使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">selectionKey.attach(theObject);</span><br><span class="line">Object attachedObj = selectionKey.attachment();</span><br></pre></td></tr></table></figure><p>还可以在用register()方法向Selector注册Channel的时候附加对象。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject);</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnect</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUF_SIZE=<span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8080</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIMEOUT = <span class="number">3000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        selector();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleAccept</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        ServerSocketChannel ssChannel = (ServerSocketChannel)key.channel();</span><br><span class="line">        SocketChannel sc = ssChannel.accept();</span><br><span class="line">        sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        sc.register(key.selector(), SelectionKey.OP_READ,ByteBuffer.allocateDirect(BUF_SIZE));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleRead</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        SocketChannel sc = (SocketChannel)key.channel();</span><br><span class="line">        ByteBuffer buf = (ByteBuffer)key.attachment();</span><br><span class="line">        <span class="keyword">long</span> bytesRead = sc.read(buf);</span><br><span class="line">        <span class="keyword">while</span>(bytesRead&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            buf.flip();</span><br><span class="line">            <span class="keyword">while</span>(buf.hasRemaining())&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)buf.get());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            buf.clear();</span><br><span class="line">            bytesRead = sc.read(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bytesRead == -<span class="number">1</span>)&#123;</span><br><span class="line">            sc.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleWrite</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        ByteBuffer buf = (ByteBuffer)key.attachment();</span><br><span class="line">        buf.flip();</span><br><span class="line">        SocketChannel sc = (SocketChannel) key.channel();</span><br><span class="line">        <span class="keyword">while</span>(buf.hasRemaining())&#123;</span><br><span class="line">            sc.write(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        buf.compact();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Selector selector = <span class="keyword">null</span>;</span><br><span class="line">        ServerSocketChannel ssc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            ssc= ServerSocketChannel.open();</span><br><span class="line">            ssc.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(selector.select(TIMEOUT) == <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"=="</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iter = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span>(iter.hasNext())&#123;</span><br><span class="line">                    SelectionKey key = iter.next();</span><br><span class="line">                    <span class="keyword">if</span>(key.isAcceptable())&#123;</span><br><span class="line">                        handleAccept(key);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">                        handleRead(key);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(key.isWritable() &amp;&amp; key.isValid())&#123;</span><br><span class="line">                        handleWrite(key);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(key.isConnectable())&#123;</span><br><span class="line">                        System.out.println(<span class="string">"isConnectable = true"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    iter.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(selector!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    selector.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ssc!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    ssc.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA-NIO&quot;&gt;&lt;a href=&quot;#JAVA-NIO&quot; class=&quot;headerlink&quot; title=&quot;JAVA NIO&quot;&gt;&lt;/a&gt;JAVA NIO&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Java NIO 由以下几个核心部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channels&lt;/li&gt;
&lt;li&gt;Buffers&lt;/li&gt;
&lt;li&gt;Selectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然Java NIO 中除此之外还有很多类和组件，但在我看来，Channel，Buffer 和 Selector 构成了核心的API。其它组件，如Pipe和FileLock，只不过是与三个核心组件共同使用的工具类。&lt;/p&gt;
&lt;p&gt;基本上，所有的 IO 在NIO 中都从一个Channel 开始。Channel，国内大多翻译成“通道”，有点像流。 不同的是，数据可以从Channel读到Buffer中，也可以从Buffer 写到Channel中。&lt;/p&gt;
&lt;p&gt;Selector允许单线程处理多个 Channel。如果你的应用打开了多个连接（通道），但每个连接的流量都很低，使用Selector就会很方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="网络编程" scheme="http://www.onebug.tech/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="NIO" scheme="http://www.onebug.tech/tags/NIO/"/>
    
      <category term="Selector" scheme="http://www.onebug.tech/tags/Selector/"/>
    
  </entry>
  
  <entry>
    <title>Linux IO 模式</title>
    <link href="http://www.onebug.tech/2021/05/07/java/javaIO/Linux%20IO%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.onebug.tech/2021/05/07/java/javaIO/Linux%20IO%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-05-08T09:56:00.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-IO模式"><a href="#Linux-IO模式" class="headerlink" title="Linux IO模式"></a>Linux IO模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对Linux操作系统而言，将最高的1G字节（从虚拟地址<code>0xC0000000</code>到<code>0xFFFFFFFF</code>），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址<code>0x00000000</code>到<code>0xBFFFFFFF</code>），供各个进程使用，称为用户空间。</p><p>每个进程可以通过系统调用进入内核，因此，Linux内核由系统内的所有进程共享。于是，从具体进程的角度来看，每个进程可以拥有4G字节的虚拟空间。</p><p><img src="http://image.onebug.tech/29f80b4c7e9aa6f9dd77da9721433cf5.png" alt="Linux 内核空间与用户空间_程序地带"></p><a id="more"></a><h3 id="文件描述符fd"><a href="#文件描述符fd" class="headerlink" title="文件描述符fd"></a>文件描述符fd</h3><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。</p><p>文件描述符在形式上是一个非负整数。实际上，它是<strong>一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表</strong>。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。</p><blockquote><p>Socket：正如应用程序使用文件描述符访问文件一样，应用程序也使用套接字描述符(socket descriptors )访问套接字。<strong>套接字描述符在 UNIX 系统中作为文件描述符实现</strong>，这也符合UNIX系统“一切皆文件”的设计思想。</p></blockquote><h3 id="缓存-I-O"><a href="#缓存-I-O" class="headerlink" title="缓存 I/O"></a>缓存 I/O</h3><p>缓存 IO 又被称作标准 IO，大多数文件系统的默认 IO 操作都是缓存 IO。在 Linux 的缓存 IO 机制中，操作系统会将 IO 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><p><img src="http://image.onebug.tech/image-20210507184156017.png" alt="image-20210507184156017"></p><h2 id="Linux-IO-模式"><a href="#Linux-IO-模式" class="headerlink" title="Linux IO 模式"></a>Linux IO 模式</h2><p>对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历<strong>两个阶段</strong>：</p><ol><li><strong>等待数据准备 (Waiting for the data to be ready)</strong></li><li><strong>将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)</strong> </li></ol><p>在整个请求过程中，数据输入至buffer需要时间，而从buffer复制数据至进程也需要时间。因此根据在这两段时间内等待方式的不同，I/O动作可以分为以下五种模式：</p><ul><li>阻塞 I/O（blocking IO）</li><li>非阻塞 I/O（nonblocking IO）</li><li>I/O 多路复用（ IO multiplexing）</li><li>信号驱动 I/O（ signal driven IO）</li><li>异步 I/O（asynchronous IO）</li></ul><blockquote><p>由于signal driven IO在实际中并不常用，这里不做介绍。</p></blockquote><p>在数据传输的过程中，避免数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间进行拷贝。有的时候，应用程序在数据进行传输的过程中不需要对数据进行访问，那么，将数据从 Linux 的页缓存拷贝到用户进程的缓冲区中就可以完全避免，传输的数据在页缓存中就可以得到处理。在某些特殊的情况下，这种零拷贝技术可以获得较好的性能。Linux 中提供类似的系统调用主要有 <code>mmap()</code>，<code>sendfile()</code> 以及 <code>splice()</code>。</p><p>如果使用<code>mmap()</code>，磁盘上的数据会通过 <code>DMA</code>被拷贝的内核缓冲区，接着操作系统会把这段内核缓冲区与应用程序共享，这样就不需要把内核缓冲区的内容往用户空间拷贝。应用程序调用 <code>write()</code>时，操作系统直接将内核缓冲区的内容拷贝到 <code>socket</code>缓冲区中，这一切都发生在内核态，最后， <code>socket</code>缓冲区再把数据发到网卡去。相对于<code>read()</code>很明显减少了一次拷贝，当拷贝数据量很大时，无疑提升了效率。</p><p><img src="http://image.onebug.tech/image-20210507184628247.png" alt="image-20210507184628247"></p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a>阻塞IO</h3><p>在Linux中，默认情况下所有的socket都是blocking，一个典型的读操作流程大概是这样：</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f313439323932383431363831325f342e706e67" alt="img"></p><p>当用户进程调用了<code>recvfrom</code>这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。这个时候kernel就要等待足够的数据到来）。这个过程需要等待，也就是说数据被拷贝到操作系统内核的缓冲区中是需要一个过程的，而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除阻塞的状态，重新运行起来。</p><p>所以，所以，阻塞IO的特点就是<strong>在IO执行的两个阶段都被block了。</strong></p><h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I/O"></a>非阻塞 I/O</h3><p>Linux下，可以通过设置socket使其变为non-blocking。当对一个non-blocking socket执行读操作时，流程是这个样子</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f313439323932393030303336315f352e706e67" alt="img"></p><p>当用户进程调用<code>recvfrom</code>时，系统不会阻塞用户进程，而是立刻返回一个<code>ewouldblock</code>错误，从用户进程角度讲 ，并不需要等待，而是马上就得到了一个结果。用户进程判断标志是<code>ewouldblock</code>时，就知道数据还没准备好，于是它就可以去做其他的事了，于是它可以再次发送<code>recvfrom</code>，一旦内核中的数据准备好了。并且又再次收到了用户进程的系统，那么它马上就将数据拷贝到了用户内存，然后返回。</p><p>当一个应用程序在一个循环里对一个非阻塞调用<code>recvfrom</code>，我们称为轮询。应用程序不断轮询内核，看看是否已经准备好了某些操作。这通常是浪费CPU时间，但这种模式偶尔会遇到。</p><h3 id="I-O-复用"><a href="#I-O-复用" class="headerlink" title="I/O 复用"></a>I/O 复用</h3><p>IO multiplexing就是我们说的select，poll，epoll，有时候也称这种IO方式为事件驱动IO（event driven IO）。select/epoll的好处就在于单个进程就可以同时处理多个网络连接的IO。当某个socket有数据到达了，就通知用户进程。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f313439323932393434343831385f362e706e67" alt="img"></p><p>当用户进程调用了select，那么整个进程会被阻塞，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>这个图和阻塞IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要进行两次系统调用 (select 和 <code>recvfrom</code>)，而阻塞IO只进行一次系统调用 (<code>recvfrom</code>)。但是，用select的优势在于它可以同时处理多个连接。</p><p>所以处理的连接数不是很高的话，使用【select/epoll】的服务器不一定比使用【多线程 + 阻塞IO】的web server性能更好，可能延迟还更大。</p><p>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为non-blocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是被select这个函数block，而不是被socket IO给block。</p><h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><p>基本原理：select 函数监视的文件描述符分3类，分别是<code>writefds</code>、<code>readfds</code>、和<code>exceptfds</code>。调用后select函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以通过<strong>遍历</strong><code>fdset</code>，来找到就绪的描述符。</p><p>缺点:</p><ul><li>select最大的缺陷就是<strong>单个进程所打开的FD是有一定限制的</strong>，它由<code>FDSETSIZE</code>设置，32位机默认是1024个，64位机默认是2048。 一般来说这个数目和系统内存关系很大</li><li>对socket进行扫描时是<strong>线性扫描，效率较低</strong>。 当套接字比较多的时候，每次select()都要通过遍历<code>FDSETSIZE</code>个Socket来完成调度，不管哪个Socket是活跃的，都遍历一遍。这会浪费很多CPU时间。</li><li>需要维护一个用来存放大量fd的数据结构，这样会使得用户空间和内核空间在传递该结构时<strong>复制开销大</strong>。</li></ul><h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><p>poll本质上和select基本没有区别。特点是<strong>没有最大连接数的限制，原因是它是基于链表来存储的</strong>，但是线性遍历和复制开销大的缺点仍然存在。poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</p><p>事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，如果采用线性遍历方式，随着监视的描述符数量的增长，其效率也会线性下降。</p><blockquote><p>水平触发模式（level trigger）：当检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用会再次响应应用程序并通知此事件。<br>边缘触发模式（edge trigger）：当检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用时，不会再次响应应用程序并通知此事件。</p></blockquote><h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><p>epoll是在Linux 2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活：</p><ul><li><p>没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）</p></li><li><p>效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。 只有活跃可用的FD才会调用callback函数；即epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关</p></li><li><p>内存拷贝，利用<code>mmap()</code>文件映射内存加速与内核空间的消息传递，减少了无用的复制</p></li><li><p>epoll支持水平触发和边缘触发</p></li></ul><blockquote><p>JDK1.5_update10版本使用epoll替代了传统的select/poll，极大的提升了NIO通信的性能。</p></blockquote><h3 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a>异步I/O</h3><p>应用进程执行 <code>aio_read</code> 系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p><p>异步 I/O 与信号驱动 I/O 的区别在于，异步 I/O 的信号是通知应用进程 I/O 完成，而信号驱动 I/O 的信号是通知应用进程可以开始 I/O。</p><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f313439323933303234333238365f382e706e67" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>同步 I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段（第二阶段），应用进程会阻塞。</li><li>异步 I/O：第二阶段应用进程不会阻塞。</li></ul><p>同步 I/O 包括阻塞式 I/O、非阻塞式 I/O、I/O 复用和信号驱动 I/O ，它们的主要区别在第一个阶段。</p><p>非阻塞式 I/O 、信号驱动 I/O 和异步 I/O 在第一阶段不会阻塞。</p><p>从同步、异步，以及阻塞、非阻塞两个维度来划分来看，IO模式可以分为：</p><p><img src="http://image.onebug.tech/image-20210507185322599.png" alt="image-20210507185322599"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-IO模式&quot;&gt;&lt;a href=&quot;#Linux-IO模式&quot; class=&quot;headerlink&quot; title=&quot;Linux IO模式&quot;&gt;&lt;/a&gt;Linux IO模式&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h3 id=&quot;用户空间与内核空间&quot;&gt;&lt;a href=&quot;#用户空间与内核空间&quot; class=&quot;headerlink&quot; title=&quot;用户空间与内核空间&quot;&gt;&lt;/a&gt;用户空间与内核空间&lt;/h3&gt;&lt;p&gt;现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对Linux操作系统而言，将最高的1G字节（从虚拟地址&lt;code&gt;0xC0000000&lt;/code&gt;到&lt;code&gt;0xFFFFFFFF&lt;/code&gt;），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址&lt;code&gt;0x00000000&lt;/code&gt;到&lt;code&gt;0xBFFFFFFF&lt;/code&gt;），供各个进程使用，称为用户空间。&lt;/p&gt;
&lt;p&gt;每个进程可以通过系统调用进入内核，因此，Linux内核由系统内的所有进程共享。于是，从具体进程的角度来看，每个进程可以拥有4G字节的虚拟空间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://image.onebug.tech/29f80b4c7e9aa6f9dd77da9721433cf5.png&quot; alt=&quot;Linux 内核空间与用户空间_程序地带&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="linux" scheme="http://www.onebug.tech/tags/linux/"/>
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="IO" scheme="http://www.onebug.tech/tags/IO/"/>
    
      <category term="socket" scheme="http://www.onebug.tech/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>【转】零拷贝技术</title>
    <link href="http://www.onebug.tech/2021/05/07/java/javaIO/zeroCopy/"/>
    <id>http://www.onebug.tech/2021/05/07/java/javaIO/zeroCopy/</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-05-08T09:58:32.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【转】零拷贝技术详解"><a href="#【转】零拷贝技术详解" class="headerlink" title="【转】零拷贝技术详解"></a>【转】<a href="https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&mid=2247483913&idx=1&sn=2da53737b8e8908cf3efdae9621c9698&chksm=fb0be89dcc7c618b0d5a1ba8ac654295454cfc2fa81fbae5a6de49bf0a91a305ca707e9864fc&scene=21#wechat_redirect" target="_blank" rel="noopener">零拷贝技术详解</a></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>考虑这样一种常用的情形：你需要将静态内容（类似图片、文件）展示给用户。那么这个情形就意味着你需要先将静态内容从磁盘中拷贝出来放到一个内存buf中，然后将这个buf通过socket传输给用户，进而用户或者静态内容的展示。这看起来再正常不过了，但是实际上这是很低效的流程，我们把上面的这种情形抽象成下面的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(file, tmp_buf, len);</span><br><span class="line">write(socket, tmp_buf, len);</span><br></pre></td></tr></table></figure><a id="more"></a><p>首先调用<code>read</code>将静态内容，这里假设为文件A，读取到<code>tmp_buf</code>, 然后调用<code>write</code>将<code>tmp_buf</code>写入到socket中，如图：</p><p><img src="http://image.onebug.tech/640" alt="图片"></p><p>在这个过程中文件A的经历了<strong>4次cop</strong>y的过程：</p><ol><li>首先，调用<code>read</code>时，文件A拷贝到了kernel模式；</li><li>之后，CPU控制将kernel模式数据copy到user模式下；</li><li>调用<code>write</code>时，先将user模式下的内容copy到kernel模式下的socket的buffer中；</li><li>最后将kernel模式下的socket buffer的数据copy到网卡设备中传送；</li></ol><p>从上面的过程可以看出，数据白白从kernel模式到user模式走了一圈，浪费了2次copy(第一次，从kernel模式拷贝到user模式；第二次从user模式再拷贝回kernel模式，即上面4次过程的第2和3步骤。)。而且上面的过程中kernel和user模式的<strong>上下文的切换也是4次</strong>。</p><p>幸运的是，你可以用一种叫做Zero-Copy的技术来去掉这些无谓的copy。应用程序用Zero-Copy来请求kernel直接把disk的data传输给socket，而不是通过应用程序传输。Zero-Copy大大提高了应用程序的性能，并且减少了kernel和user模式上下文的切换。</p><hr><h2 id="详述"><a href="#详述" class="headerlink" title="详述"></a>详述</h2><p>Zero-Copy技术省去了将操作系统的read buffer拷贝到程序的buffer，以及从程序buffer拷贝到socket buffer的步骤，直接将read buffer拷贝到socket buffer。Java <code>NIO</code>中的<code>FileChannal.transferTo()</code>方法就是这样的实现，这个实现是依赖于操作系统底层的<code>sendFile()</code>实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">long</span> transferTo​(<span class="keyword">long</span> position, <span class="keyword">long</span> count, WritableByteChannel target)</span><br></pre></td></tr></table></figure><p>他底层的调用时系统调用<code>sendFile()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"><span class="function">ssize_t <span class="title">sendfile</span><span class="params">(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, off_t *offset, size_t count)</span></span>;</span><br></pre></td></tr></table></figure><p>下图展示了在<code>transferTo()</code>之后的数据流向：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/HV4yTI6PjbKgic1MvAjpofibyQwiauK9swkLT7QYEgjoSWgksiaPm1m7mHlicH0YquHnicwnBcsJpyUJOcH3EuvWyVWA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>下图展示了在使用<code>transferTo()</code>之后的上下文切换：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/HV4yTI6PjbKgic1MvAjpofibyQwiauK9swkxXxl8mCQDdzXJKmZJogZthpx2g5wEJrFZSib6cJFEFqNcCqws3bgUcg/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>使用了Zero-Copy技术之后，整个过程如下：</p><ol><li><code>transferTo()</code>方法使得文件A的内容直接拷贝到一个read buffer（kernel buffer）中；</li><li>然后数据(kernel buffer)拷贝到socket buffer中。</li><li>最后将socket buffer中的数据拷贝到网卡设备（protocol engine）中传输；</li></ol><p>这显然是一个伟大的进步：这里把<strong>上下文的切换次数从4次减少到2次，同时也把数据copy的次数从4次降低到了3次。</strong></p><p>但是这是Zero-Copy么，答案是否定的。</p><hr><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>Linux 2.1内核开始引入了<code>sendfile</code>函数（上一节有提到）,用于将文件通过socket传送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile(socket, file, len);</span><br></pre></td></tr></table></figure><p>该函数通过一次系统调用完成了文件的传送，减少了原来read/write方式的模式切换。此外更是减少了数据的copy， <code>sendfile</code>的详细过程如图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/HV4yTI6PjbKgic1MvAjpofibyQwiauK9swklziaq26RXuQ5OhkostSBhs3uNxbtJYnalq4CfAGtWqfbBjXoT1SELrA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>通过<code>sendfile</code>传送文件只需要一次系统调用，当调用<code>sendfile</code>时：</p><ol><li>首先（通过DMA）将数据从磁盘读取到kernel buffer中；</li><li>然后将kernel buffer拷贝到socket buffer中；</li><li>最后将socket buffer中的数据copy到网卡设备（protocol engine）中发送；</li></ol><p>这个过程就是第二节（详述）中的那个步骤。</p><p><code>sendfile</code>与read/write模式相比，少了一次copy。但是从上述过程中也可以发现从kernel buffer中将数据copy到socket buffer是没有必要的。</p><p>Linux 2.4 内核对<code>sendfile</code>做了改进，如图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/HV4yTI6PjbKgic1MvAjpofibyQwiauK9swk48yndvPialCSfyx5pMzpeicmzNXGugFUJfYR3oPuPr2egIZ3Vz5WJ2EA/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>改进后的处理过程如下：</p><ol><li>将文件拷贝到kernel buffer中；</li><li>向socket buffer中追加当前要发生的数据在kernel buffer中的<strong>位置和偏移量</strong>；</li><li>根据socket buffer中的位置和偏移量直接将kernel buffer的数据copy到网卡设备（protocol engine）中；</li></ol><p>经过上述过程，<strong>数据只经过了2次copy就从磁盘传送出去了。这个才是真正的Zero-Copy</strong>(这里的零拷贝是针对kernel来讲的，数据在kernel模式下是Zero-Copy)。</p><p>正是Linux 2.4的内核做了改进，Java中的<code>TransferTo()</code>实现了Zero-Copy,如下图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/HV4yTI6PjbKgic1MvAjpofibyQwiauK9swkIr4RdZunnVfczbFdpJT1bFQRBdicslA4bW92FJBvtiacojo6KgBDial6A/640?tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>Zero-Copy技术的使用场景有很多，比如Kafka, 又或者是Netty等，可以大大提升程序的性能。</p><blockquote><p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&mid=2247483913&idx=1&sn=2da53737b8e8908cf3efdae9621c9698&chksm=fb0be89dcc7c618b0d5a1ba8ac654295454cfc2fa81fbae5a6de49bf0a91a305ca707e9864fc&scene=21#wechat_redirect" target="_blank" rel="noopener">什么是Zero-Copy？ (qq.com)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【转】零拷贝技术详解&quot;&gt;&lt;a href=&quot;#【转】零拷贝技术详解&quot; class=&quot;headerlink&quot; title=&quot;【转】零拷贝技术详解&quot;&gt;&lt;/a&gt;【转】&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&amp;mid=2247483913&amp;idx=1&amp;sn=2da53737b8e8908cf3efdae9621c9698&amp;chksm=fb0be89dcc7c618b0d5a1ba8ac654295454cfc2fa81fbae5a6de49bf0a91a305ca707e9864fc&amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;零拷贝技术详解&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;考虑这样一种常用的情形：你需要将静态内容（类似图片、文件）展示给用户。那么这个情形就意味着你需要先将静态内容从磁盘中拷贝出来放到一个内存buf中，然后将这个buf通过socket传输给用户，进而用户或者静态内容的展示。这看起来再正常不过了，但是实际上这是很低效的流程，我们把上面的这种情形抽象成下面的过程：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;read(file, tmp_buf, len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write(socket, tmp_buf, len);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="IO" scheme="http://www.onebug.tech/tags/IO/"/>
    
      <category term="socket" scheme="http://www.onebug.tech/tags/socket/"/>
    
      <category term="零拷贝技术" scheme="http://www.onebug.tech/tags/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java Socket 编程</title>
    <link href="http://www.onebug.tech/2021/05/07/java/javaIO/socket%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.onebug.tech/2021/05/07/java/javaIO/socket%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2021-05-06T16:00:00.000Z</published>
    <updated>2021-05-08T09:56:58.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Socket-编程"><a href="#Java-Socket-编程" class="headerlink" title="Java Socket 编程"></a>Java Socket 编程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>首先需要了解两个类：Socket和SocketServer。</p><h3 id="SocketServer"><a href="#SocketServer" class="headerlink" title="SocketServer"></a>SocketServer</h3><p>SocketServer实现了服务器套接字。 服务器套接字会等待通过网络进入的请求。 用户可以根据该请求执行某些操作，然后将结果返回给请求者（也可以选择不返回）。</p><a id="more"></a><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span> <span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog,InetAddress bindAddr)</span></span></span><br></pre></td></tr></table></figure><p>创建具有<strong>指定端口</strong>的服务器，监听backlog和要<strong>绑定</strong>的本地IP地址。</p><p><strong>参数</strong></p><ul><li><code>port</code> - 绑定的本地端口号。 端口号<code>0</code>表示从临时端口范围自动分配端口号，可以通过调用<code>getLocalPort</code>来查看此端口号。</li><li><code>backlog</code> - 传入连接指示（连接请求）的最大队列长度，如果队列已满时连接指示到达，则拒绝连接。</li><li><code>bindAddr</code> - 服务器将绑定到的本地<code>InetAddress</code>， 如果<code>bindAddr</code>为null，它将默认接受任何/所有本地地址上的连接。</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><p><code>accept()</code>侦听对此套接字的连接并接受它。 该方法将阻塞，直到建立连接，成功建立连接后会返回一个<strong>新的Socket</strong>。</p></li><li><p><code>close()</code>关闭此套接字</p></li></ul><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>该类实现客户端套接字（一般简称为“套接字”）。 套接字是两台机器之间通信的端点。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Socket</span><span class="params">(String host,<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> UnknownHostException,IOException</span></span><br></pre></td></tr></table></figure><p>创建流套接字并将其<strong>连接</strong>到指定主机上的指定端口号。</p><h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li><p><code>getInputStream()</code>返回此套接字的输入流，注意关闭返回的<code>InputStream</code>将关闭关联的套接字。</p></li><li><p><code>getOutputStream()</code>返回此套接字的输出流，关闭返回的<code>OutputStream</code>将关闭关联的套接字。</p></li><li><p><code>close()</code>关闭此套接字，关闭此套接字也将关闭套接字<code>InputStream</code>和<code>OutputStream</code> 。一旦套接字关闭，进一步的网络连接就需要创建一个新的套接字。</p></li><li><p><code>shutdownInput()</code>将此套接字的输入流设置为“流结束”。 发送到套接字输入流端的任何数据都会被确认，然后以静默方式丢弃。套接字输入流<code>read</code>方法将返回<code>-1</code> （流结束）。</p></li><li><p><code>shutdownOutput()</code>禁用此套接字的输出流。 对于TCP套接字，将发送任何先前写入的数据，然后发送TCP的正常<strong>连接终止序列</strong>。 </p></li><li><p><code>isConnected()</code>返回套接字的连接状态。</p></li><li><p><code>setOption(SocketOption&lt;T&gt; name, T value)</code>设置套接字选项的值。</p></li></ul><h3 id="通信基本示例"><a href="#通信基本示例" class="headerlink" title="通信基本示例"></a>通信基本示例</h3><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建具有指定端口的服务器套接字</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8081</span>;</span><br><span class="line">        <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">        <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">        SocketAddress serverAddress=server.getLocalSocketAddress();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// accept() 会阻塞进程，直到建立新连接，成功建立连接后会返回一个新的Socket。</span></span><br><span class="line">        log.info(<span class="string">"Waiting for new connection(Listening on : &#123;&#125;)"</span>,serverAddress);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入、输出流、客户端信息</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        OutputStream outputStream=socket.getOutputStream();</span><br><span class="line">        SocketAddress clientAddress=socket.getRemoteSocketAddress();</span><br><span class="line">        log.info(<span class="string">"There is a new  connection &#123;&#125;"</span>,socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立缓冲区用于读取或写入</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        log.info(<span class="string">"Waiting for message from client &#123;&#125; "</span>,clientAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//read()会阻塞进程，直到有输入，返回-1代表流结束</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len,CHARSET));</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Get a message '&#123;&#125;' from client &#123;&#125;"</span> ,sb,socket.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接和服务器</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">49</span>:<span class="number">01.451</span> [main] INFO cn.lbs.socket.base.SocketServer - <span class="function">Waiting <span class="keyword">for</span> new <span class="title">connection</span><span class="params">(Listening on : <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8081</span>)</span></span></span><br><span class="line"><span class="function">13:49:06.413 [main] INFO cn.lbs.socket.base.SocketServer - There is a new  connection Socket[addr</span>=/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,port=<span class="number">4463</span>,localport=<span class="number">8081</span>]</span><br><span class="line"><span class="number">13</span>:<span class="number">49</span>:<span class="number">06.413</span> [main] INFO cn.lbs.socket.base.SocketServer - Waiting <span class="keyword">for</span> message from client /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4463</span> </span><br><span class="line"><span class="number">13</span>:<span class="number">49</span>:<span class="number">06.427</span> [main] INFO cn.lbs.socket.base.SocketServer - Get a message <span class="string">'Hello World'</span> from client /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4463</span></span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置连接的服务端IP地址和端口</span></span><br><span class="line">        <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8081</span>;</span><br><span class="line">        <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">        <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与服务端建立连接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(HOST, PORT);</span><br><span class="line">        <span class="comment">// 建立连接后获得输出、输出流、连接信息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        InputStream inputStream=socket.getInputStream();</span><br><span class="line">        SocketAddress   localAddress=socket.getLocalSocketAddress();</span><br><span class="line">        SocketAddress remoteAddress=socket.getRemoteSocketAddress();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"The client &#123;&#125; successfully connects to the server &#123;&#125;"</span>,localAddress,remoteAddress);</span><br><span class="line"></span><br><span class="line">        String message=<span class="string">"Hello World"</span>;</span><br><span class="line">        log.info(<span class="string">"The client &#123;&#125; sends a message '&#123;&#125;' to the server "</span>,localAddress,message);</span><br><span class="line">        socket.getOutputStream().write(message.getBytes(CHARSET));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">49</span>:<span class="number">06.416</span> [main] INFO cn.lbs.socket.base.SocketClient - The client /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4463</span> successfully connects to the server /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span></span><br><span class="line"><span class="number">13</span>:<span class="number">49</span>:<span class="number">06.426</span> [main] INFO cn.lbs.socket.base.SocketClient - The client /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4463</span> sends a message <span class="string">'Hello World'</span> to the server</span><br></pre></td></tr></table></figure><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="双向通信基础"><a href="#双向通信基础" class="headerlink" title="双向通信基础"></a>双向通信基础</h3><p><strong>服务端</strong></p><p>当读取完客户端的消息后，打开输出流，将指定消息发送回客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建具有指定端口的服务器套接字</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8081</span>;</span><br><span class="line">        <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">        <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(PORT);</span><br><span class="line">        SocketAddress serverAddress=server.getLocalSocketAddress();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// accept() 会阻塞进程，直到建立新连接，成功建立连接后会返回一个新的Socket。</span></span><br><span class="line">        log.info(<span class="string">"Waiting for new connection(Listening on : &#123;&#125;)"</span>,serverAddress);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入、输出流、客户端信息</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        OutputStream outputStream=socket.getOutputStream();</span><br><span class="line">        SocketAddress clientAddress=socket.getRemoteSocketAddress();</span><br><span class="line">        log.info(<span class="string">"There is a new  connection &#123;&#125;"</span>,socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立缓冲区用于读取或写入</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        log.info(<span class="string">"Waiting for message from client &#123;&#125; "</span>,clientAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//read()会阻塞进程，直到有输入，返回-1代表流结束</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len,CHARSET));</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Get a message '&#123;&#125;' from client &#123;&#125;"</span> ,sb,socket.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String respStr= <span class="string">"Hello,I get the message"</span>;</span><br><span class="line">        log.info(<span class="string">"Response message '&#123;&#125;' to Client &#123;&#125; "</span>,respStr,clientAddress);</span><br><span class="line">        outputStream.write(respStr.getBytes(CHARSET));</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接和服务器</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">13:58:51.050 [main] INFO cn.lbs.socket.base.SocketServer - Waiting <span class="keyword">for</span> new connection(Listening on : 0.0.0.0/0.0.0.0:8081)</span><br><span class="line">13:58:58.706 [main] INFO cn.lbs.socket.base.SocketServer - There is a new  connection Socket[addr=/127.0.0.1,port=4554,localport=8081]</span><br><span class="line">13:58:58.706 [main] INFO cn.lbs.socket.base.SocketServer - Waiting <span class="keyword">for</span> message from client /127.0.0.1:4554 </span><br><span class="line">13:58:58.719 [main] INFO cn.lbs.socket.base.SocketServer - Get a message <span class="string">'Hello World'</span> from client /127.0.0.1:4554</span><br><span class="line">13:58:58.719 [main] INFO cn.lbs.socket.base.SocketServer - Response message <span class="string">'Hello,I get the message'</span> to Client /127.0.0.1:4554</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><p>客户端也有相应的变化，在发送完消息时，调用关闭输出流方法，然后打开输出流，等候服务端的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置连接的服务端IP地址和端口</span></span><br><span class="line">        <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8081</span>;</span><br><span class="line">        <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">        <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与服务端建立连接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(HOST, PORT);</span><br><span class="line">        <span class="comment">// 建立连接后获得输出、输出流、连接信息</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        InputStream inputStream=socket.getInputStream();</span><br><span class="line">        SocketAddress   localAddress=socket.getLocalSocketAddress();</span><br><span class="line">        SocketAddress remoteAddress=socket.getRemoteSocketAddress();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"The client &#123;&#125; successfully connects to the server &#123;&#125;"</span>,localAddress,remoteAddress);</span><br><span class="line"></span><br><span class="line">        String message=<span class="string">"Hello World"</span>;</span><br><span class="line">        log.info(<span class="string">"The client &#123;&#125; sends a message '&#123;&#125;' to the server "</span>,localAddress,message);</span><br><span class="line">        outputStream.write(message.getBytes(CHARSET));</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立缓冲区用于读取或写入</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//获取响应</span></span><br><span class="line">        log.info(<span class="string">"Client &#123;&#125; is  waiting for Response"</span>,localAddress);</span><br><span class="line">        <span class="comment">//read()会阻塞进程，直到有输入，返回-1代表流结束</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">            sb.append(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len,CHARSET));</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"Get response message '&#123;&#125;' from Server"</span> , sb);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">13:58:58.708 [main] INFO cn.lbs.socket.base.SocketClient - The client /127.0.0.1:4554 successfully connects to the server /127.0.0.1:8081</span><br><span class="line">13:58:58.719 [main] INFO cn.lbs.socket.base.SocketClient - The client /127.0.0.1:4554 sends a message <span class="string">'Hello World'</span> to the server </span><br><span class="line">13:58:58.719 [main] INFO cn.lbs.socket.base.SocketClient - Client /127.0.0.1:4554 is  waiting <span class="keyword">for</span> Response</span><br><span class="line">13:58:58.720 [main] INFO cn.lbs.socket.base.SocketClient - Get response message <span class="string">'Hello,I get the message'</span> from Server</span><br></pre></td></tr></table></figure><h3 id="发送完成告知机制"><a href="#发送完成告知机制" class="headerlink" title="发送完成告知机制"></a>发送完成告知机制</h3><h4 id="关闭Socket连接"><a href="#关闭Socket连接" class="headerlink" title="关闭Socket连接"></a>关闭Socket连接</h4><p>当Socket关闭的时候，服务端就会收到响应的关闭信号，那么服务端也就知道流已经关闭了，这个时候读取操作完成，就可以继续后续工作。但是客户端Socket关闭后，将不能接受服务端发送的消息，也不能再次发送消息。如果客户端想再次发送消息，需要重现创建Socket连接</p><h4 id="关闭输出流"><a href="#关闭输出流" class="headerlink" title="关闭输出流"></a>关闭输出流</h4><p>调用Socket的<code>shutdownOutput()</code>方法（不是关闭输出流<code>close()</code>，因为关闭输出流会直接关闭Socket连接），底层会告知服务端我这边已经写完了，那么服务端收到消息后，就能知道已经读取完消息，如果服务端有要返回给客户的消息那么就可以通过服务端的输出流发送给客户端。这种方式通过关闭客户端的输出流，告知服务端已经写完了，虽然可以读到服务端发送的消息，但是是不能再次发送消息给服务端，如果再次发送，需要重新建立Socket连接。</p><h4 id="约定符号"><a href="#约定符号" class="headerlink" title="约定符号"></a>约定符号</h4><p>就是双方约定一个字符或者一个短语，来当做消息发送完成的标识，通常这么做就需要改造读取方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = server.accept();</span><br><span class="line"><span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">BufferedReader read=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream(),<span class="string">"UTF-8"</span>));</span><br><span class="line">String line;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span> ((line = read.readLine()) != <span class="keyword">null</span> &amp;&amp; <span class="string">"end"</span>.equals(line)) &#123;</span><br><span class="line">  <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">  sb.append(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点：不需要关闭流，当发送完一条消息后可以再次发送新的命令消息</p></li><li><p>缺点：需要额外的约定结束标志，太简单的容易出现在要发送的消息中，误被结束，太复杂的不好处理，还占带宽</p></li></ul><h4 id="指定长度"><a href="#指定长度" class="headerlink" title="指定长度"></a>指定长度</h4><p><strong>先指定后续命令的长度</strong>，然后读取指定长度的内容做为客户端发送的消息。一般，如果用作命令发送，两个字节就够了，4个字节基本就能满足所有要求。</p><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 监听指定的端口</span></span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// server将一直等待连接的到来</span></span><br><span class="line">        System.out.println(<span class="string">"Waiting for new connection(Listening Port:"</span>+server.getLocalPort()+<span class="string">")"</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        System.out.println(<span class="string">"There is a new connection "</span>+socket);</span><br><span class="line">        <span class="comment">// 建立好连接后，从socket中获取输入流，并建立缓冲区进行读取</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] receivebytes,sendBytes;</span><br><span class="line">        <span class="comment">// 因为可以复用Socket且能判断长度，所以可以一个Socket用到底</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">"Waiting for Message"</span>);</span><br><span class="line">            <span class="comment">// 首先读取两个字节表示的长度,read()方法会阻塞进程</span></span><br><span class="line">            <span class="keyword">int</span> first = inputStream.read();</span><br><span class="line">            <span class="comment">//如果读取的值为-1 说明到了流的末尾，Socket已经被关闭了，此时将不能再去读取</span></span><br><span class="line">            <span class="keyword">if</span>(first==-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Close connection"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> second = inputStream.read();</span><br><span class="line">            <span class="keyword">int</span> length = (first &lt;&lt; <span class="number">8</span>) + second;</span><br><span class="line">            <span class="comment">// 然后构造一个指定长的byte数组</span></span><br><span class="line">            receivebytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">            <span class="comment">// 然后读取指定长度的消息即可</span></span><br><span class="line">            inputStream.read(receivebytes);</span><br><span class="line">            String recStr=<span class="keyword">new</span> String(receivebytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Get message from client: "</span> + recStr);</span><br><span class="line"></span><br><span class="line">            String respStr=<span class="string">"Hello Client,I get the message:"</span>+recStr;</span><br><span class="line">            System.out.println(<span class="string">"Response message &#123;"</span>+respStr+<span class="string">"&#125; to Client"</span>);</span><br><span class="line">            <span class="comment">//首先需要计算得知消息的长度</span></span><br><span class="line">            sendBytes = respStr.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">//然后将消息的长度优先发送出去</span></span><br><span class="line">            outputStream.write(sendBytes.length &gt;&gt;<span class="number">8</span>);</span><br><span class="line">            outputStream.write(sendBytes.length);</span><br><span class="line">            <span class="comment">//然后将消息再次发送出去</span></span><br><span class="line">            outputStream.write(sendBytes);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">14:03:20.550 [main] INFO cn.lbs.socket.communication.SocketServer - Waiting <span class="keyword">for</span> new connection(Listening on : 0.0.0.0/0.0.0.0:8081)</span><br><span class="line">14:03:23.534 [main] INFO cn.lbs.socket.communication.SocketServer - There is a new  connection Socket[addr=/127.0.0.1,port=4602,localport=8081]</span><br><span class="line">14:03:23.535 [main] INFO cn.lbs.socket.communication.SocketServer - Waiting <span class="keyword">for</span> message from client /127.0.0.1:4602 </span><br><span class="line">14:03:23.546 [main] INFO cn.lbs.socket.communication.SocketServer - Get  message <span class="string">'Hello World'</span> from client /127.0.0.1:4602</span><br><span class="line">14:03:23.546 [main] INFO cn.lbs.socket.communication.SocketServer - Response message <span class="string">'Hello,I get the message'</span> to Client /127.0.0.1:4602 </span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Waiting <span class="keyword">for</span> message from client /127.0.0.1:4602 </span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Get  message <span class="string">'你好，世界'</span> from client /127.0.0.1:4602</span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Response message <span class="string">'Hello,I get the message'</span> to Client /127.0.0.1:4602 </span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Waiting <span class="keyword">for</span> message from client /127.0.0.1:4602 </span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Get  message <span class="string">'YOLO'</span> from client /127.0.0.1:4602</span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Response message <span class="string">'Hello,I get the message'</span> to Client /127.0.0.1:4602 </span><br><span class="line">14:03:23.547 [main] INFO cn.lbs.socket.communication.SocketServer - Waiting <span class="keyword">for</span> message from client /127.0.0.1:4602</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 要连接的服务端IP地址和端口</span></span><br><span class="line">        String host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">        <span class="comment">// 与服务端建立连接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">        System.out.println(<span class="string">"Connect to "</span>+socket.getRemoteSocketAddress()+<span class="string">" Success"</span>);</span><br><span class="line">        <span class="comment">// 建立连接后获得输出流</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        String[] messages = &#123;<span class="string">"Hello World"</span>,<span class="string">"你好，世界"</span>,<span class="string">"YOLO"</span>&#125;;</span><br><span class="line">        <span class="keyword">byte</span>[] receivebytes,sendBytes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String message:messages)&#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">"Send &#123;"</span>+message+<span class="string">"&#125;to Server"</span>);</span><br><span class="line">            <span class="comment">//首先需要计算得知消息的长度</span></span><br><span class="line">            sendBytes = message.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">//然后将消息的长度优先发送出去</span></span><br><span class="line">            outputStream.write(sendBytes.length &gt;&gt;<span class="number">8</span>);</span><br><span class="line">            outputStream.write(sendBytes.length);</span><br><span class="line">            <span class="comment">//然后将消息再次发送出去</span></span><br><span class="line">            outputStream.write(sendBytes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Waiting for Response"</span>);</span><br><span class="line">            <span class="comment">// 首先读取两个字节表示的长度,read()方法会阻塞进程</span></span><br><span class="line">            <span class="keyword">int</span> first = inputStream.read();</span><br><span class="line">            <span class="comment">//如果读取的值为-1 说明到了流的末尾，Socket已经被关闭了，此时将不能再去读取</span></span><br><span class="line">            <span class="keyword">if</span>(first==-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Close connection"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> second = inputStream.read();</span><br><span class="line">            <span class="keyword">int</span> length = (first &lt;&lt; <span class="number">8</span>) + second;</span><br><span class="line">            <span class="comment">// 然后构造一个指定长的byte数组</span></span><br><span class="line">            receivebytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">            <span class="comment">// 然后读取指定长度的消息即可</span></span><br><span class="line">            inputStream.read(receivebytes);</span><br><span class="line">            System.out.println(<span class="string">"Get Response from Server: "</span> + <span class="keyword">new</span> String(receivebytes, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">13:41:06.058 [main] INFO cn.lbs.socket.communication.SocketClient - The client /127.0.0.1:4364 successfully connects to the server /127.0.0.1:8081</span><br><span class="line">13:41:06.065 [main] INFO cn.lbs.socket.communication.SocketClient - The client /127.0.0.1:4364 sends a message <span class="string">'Hello World'</span> to the server </span><br><span class="line">13:41:06.065 [main] INFO cn.lbs.socket.communication.SocketClient - Client /127.0.0.1:4364 is  waiting <span class="keyword">for</span> Response</span><br><span class="line">13:41:06.068 [main] INFO cn.lbs.socket.communication.SocketClient - Get response message <span class="string">'Hello (/127.0.0.1:4364),I get the message'</span> from Server</span><br><span class="line">13:41:06.068 [main] INFO cn.lbs.socket.communication.SocketClient - The client /127.0.0.1:4364 sends a message <span class="string">'你好，世界'</span> to the server </span><br><span class="line">13:41:06.069 [main] INFO cn.lbs.socket.communication.SocketClient - Client /127.0.0.1:4364 is  waiting <span class="keyword">for</span> Response</span><br><span class="line">13:41:06.069 [main] INFO cn.lbs.socket.communication.SocketClient - Get response message <span class="string">'Hello (/127.0.0.1:4364),I get the message'</span> from Server</span><br><span class="line">13:41:06.069 [main] INFO cn.lbs.socket.communication.SocketClient - The client /127.0.0.1:4364 sends a message <span class="string">'YOLO'</span> to the server </span><br><span class="line">13:41:06.069 [main] INFO cn.lbs.socket.communication.SocketClient - Client /127.0.0.1:4364 is  waiting <span class="keyword">for</span> Response</span><br><span class="line">13:41:06.069 [main] INFO cn.lbs.socket.communication.SocketClient - Get response message <span class="string">'Hello (/127.0.0.1:4364),I get the message'</span> from Server</span><br></pre></td></tr></table></figure><h2 id="服务端并发"><a href="#服务端并发" class="headerlink" title="服务端并发"></a>服务端并发</h2><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>在实际生产中，创建的线程会交给线程池来处理，这样可以达到线程复用的效果，也可以防止短时间内高并发，<code>new Thread</code>短时间创建大量线程，导致资源耗尽，服务挂掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">    <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line">    ExecutorService threadPool;</span><br><span class="line">    ServerSocket serverSocket;</span><br><span class="line">    SocketAddress serverAddress;</span><br><span class="line"></span><br><span class="line">    Server(<span class="keyword">int</span> port) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         threadPool = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">// 创建具有指定端口的服务器套接字</span></span><br><span class="line">        serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">        serverAddress= serverSocket.getLocalSocketAddress();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// accept() 会阻塞进程，直到建立新连接，成功建立连接后会返回一个新的Socket。</span></span><br><span class="line">            log.info(<span class="string">"Waiting for new connection(Listening on : &#123;&#125;)"</span>, serverAddress);</span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            log.info(<span class="string">"There is a new  connection &#123;&#125;"</span>, socket);</span><br><span class="line">            threadPool.submit(<span class="keyword">new</span> SocketTask(socket));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Server(<span class="number">8081</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SocketTask</span>  <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">    <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line">    Socket socket;</span><br><span class="line">    SocketTask(Socket socket)&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket=socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 建立好连接后，从socket中获取输入、输出流、客户端信息</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">            SocketAddress clientAddress = socket.getRemoteSocketAddress();</span><br><span class="line">            <span class="comment">//建立缓冲区用于读取或写入</span></span><br><span class="line">            <span class="keyword">byte</span>[] receiveBytes, sendBytes;</span><br><span class="line">            <span class="comment">// 因为可以复用Socket且能判断长度，所以可以一个Socket用到底</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                log.info(<span class="string">"Waiting for message from client &#123;&#125; "</span>, clientAddress);</span><br><span class="line">                <span class="comment">// 首先读取两个字节表示的长度,read()方法会阻塞进程</span></span><br><span class="line">                <span class="keyword">int</span> firstByte = inputStream.read();</span><br><span class="line">                <span class="comment">//如果读取的值为-1 说明到了流的末尾，Socket已经被关闭了，此时将不能再去读取</span></span><br><span class="line">                <span class="keyword">if</span> (firstByte == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> secondByte = inputStream.read();</span><br><span class="line">                <span class="keyword">int</span> messageLen = (firstByte &lt;&lt; <span class="number">8</span>) + secondByte;</span><br><span class="line">                <span class="comment">// 然后构造一个指定长的byte数组</span></span><br><span class="line">                receiveBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[messageLen];</span><br><span class="line">                <span class="comment">// 然后读取指定长度的消息即可</span></span><br><span class="line">                inputStream.read(receiveBytes);</span><br><span class="line">                log.info(<span class="string">"Get  message '&#123;&#125;' from client &#123;&#125;"</span>, <span class="keyword">new</span> String(receiveBytes, CHARSET), clientAddress);</span><br><span class="line">                String respStr = <span class="string">"Hello,I get the message"</span>;</span><br><span class="line">                log.info(<span class="string">"Response message '&#123;&#125;' to Client &#123;&#125; "</span>, respStr, clientAddress);</span><br><span class="line">                <span class="comment">//首先需要计算得知消息的长度</span></span><br><span class="line">                sendBytes = respStr.getBytes(CHARSET);</span><br><span class="line">                <span class="comment">//然后将消息的长度优先发送出去</span></span><br><span class="line">                outputStream.write(sendBytes.length &gt;&gt; <span class="number">8</span>);</span><br><span class="line">                outputStream.write(sendBytes.length);</span><br><span class="line">                <span class="comment">//然后将消息再次发送出去</span></span><br><span class="line">                outputStream.write(sendBytes);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"关闭连接&#123;&#125;"</span>,socket);</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>并发模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置连接的服务端IP地址和端口</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String HOST = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">8081</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CLIENTSNUM=<span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService threadPool= Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;CLIENTSNUM;i++)&#123;</span><br><span class="line">            threadPool.submit(<span class="keyword">new</span> ClientTask(HOST,PORT));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientTask</span> <span class="keyword">implements</span>  <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class="line">    <span class="keyword">final</span> String CHARSET=<span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> MESSAGENUM=<span class="number">100</span>;</span><br><span class="line">    Socket socket ;</span><br><span class="line"></span><br><span class="line">    OutputStream outputStream;</span><br><span class="line">    InputStream inputStream;</span><br><span class="line">    SocketAddress   localAddress;</span><br><span class="line">    SocketAddress remoteAddress;</span><br><span class="line"></span><br><span class="line">    ClientTask(String host,<span class="keyword">int</span> port) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 与服务端建立连接</span></span><br><span class="line">        <span class="comment">// 建立连接后获得输出、输出流、连接信息</span></span><br><span class="line">        socket=<span class="keyword">new</span> Socket(host,port);</span><br><span class="line">        outputStream = socket.getOutputStream();</span><br><span class="line">        inputStream=socket.getInputStream();</span><br><span class="line">        localAddress=socket.getLocalSocketAddress();</span><br><span class="line">        remoteAddress=socket.getRemoteSocketAddress();</span><br><span class="line">        log.info(<span class="string">"The client &#123;&#125; successfully connects to the server &#123;&#125;"</span>,localAddress,remoteAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] messages = &#123;<span class="string">"Hello World"</span>,<span class="string">"你好，世界"</span>,<span class="string">"YOLO"</span>&#125;;</span><br><span class="line">            <span class="keyword">byte</span>[] receiveBytes,sendBytes;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MESSAGENUM;i++) &#123;</span><br><span class="line">                String message=RandomStringUtils.random(<span class="number">10</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">                inputStream = socket.getInputStream();</span><br><span class="line">                outputStream = socket.getOutputStream();</span><br><span class="line">                log.info(<span class="string">"The client &#123;&#125; sends a message '&#123;&#125;' to the server "</span>, localAddress, message);</span><br><span class="line">                <span class="comment">//首先需要计算得知消息的长度</span></span><br><span class="line">                sendBytes = message.getBytes(CHARSET);</span><br><span class="line">                <span class="comment">//然后将消息的长度优先发送出去</span></span><br><span class="line">                outputStream.write(sendBytes.length &gt;&gt; <span class="number">8</span>);</span><br><span class="line">                outputStream.write(sendBytes.length);</span><br><span class="line">                <span class="comment">//然后将消息再次发送出去</span></span><br><span class="line">                outputStream.write(sendBytes);</span><br><span class="line">                outputStream.flush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取响应</span></span><br><span class="line">                log.info(<span class="string">"Client &#123;&#125; is  waiting for Response"</span>, localAddress);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 首先读取两个字节表示的长度,read()方法会阻塞进程</span></span><br><span class="line">                <span class="keyword">int</span> firstByte = inputStream.read();</span><br><span class="line">                <span class="comment">//如果读取的值为-1 说明到了流的末尾，Socket已经被关闭了，此时将不能再去读取</span></span><br><span class="line">                <span class="keyword">if</span> (firstByte == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> secondByte = inputStream.read();</span><br><span class="line">                <span class="keyword">int</span> messageLen = (firstByte &lt;&lt; <span class="number">8</span>) + secondByte;</span><br><span class="line">                <span class="comment">// 然后构造一个指定长的byte数组</span></span><br><span class="line">                receiveBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[messageLen];</span><br><span class="line">                <span class="comment">// 然后读取指定长度的消息即可</span></span><br><span class="line">                inputStream.read(receiveBytes);</span><br><span class="line">                log.info(<span class="string">"Get response message '&#123;&#125;' from Server"</span>, <span class="keyword">new</span> String(receiveBytes, CHARSET));</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"关闭连接&#123;&#125;"</span>,socket);</span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="SocketOptions"><a href="#SocketOptions" class="headerlink" title="SocketOptions"></a>SocketOptions</h3><ul><li>int TCP_NODELAY = 0x0001：对此连接禁用 Nagle 算法。</li><li>int SO_BINDADDR = 0x000F：此选项为 TCP 或 UDP 套接字在 IP 地址头中设置服务类型或流量类字段。</li><li>int SO_REUSEADDR = 0x04：设置套接字的 SO_REUSEADDR。</li><li>int SO_BROADCAST = 0x0020：此选项启用和禁用发送广播消息的处理能力。</li><li>int IP_MULTICAST_IF = 0x10：设置用于发送多播包的传出接口。</li><li>int IP_MULTICAST_IF2 = 0x1f：设置用于发送多播包的传出接口。</li><li>int IP_MULTICAST_LOOP = 0x12：此选项启用或禁用多播数据报的本地回送。</li><li>int IP_TOS = 0x3：此选项为 TCP 或 UDP 套接字在 IP 地址头中设置服务类型或流量类字段。</li><li>int SO_LINGER = 0x0080：指定关闭时逗留的超时值。</li><li>int <strong>SO_TIMEOUT</strong> = 0x1006：设置阻塞 Socket 操作的超时值： ServerSocket.accept(); SocketInputStream.read(); DatagramSocket.receive(); 选项必须在进入阻塞操作前设置才能生效。</li><li>int SO_SNDBUF = 0x1001：设置传出网络 I/O 的平台所使用的基础缓冲区大小的提示。</li><li>int SO_RCVBUF = 0x1002：设置传入网络 I/O 的平台所使用基础缓冲区的大小的提示。</li><li>int <strong>SO_KEEPALIVE</strong> = 0x0008：为 TCP 套接字设置 keepalive 选项时，对于构建长时间连接的Socket还是配置上SO_KEEPALIVE比较好</li><li>int SO_OOBINLINE = 0x1003：置 OOBINLINE 选项时，在套接字上接收的所有 TCP 紧急数据都将通过套接字输入流接收。</li></ul><h3 id="Socket与操作系统"><a href="#Socket与操作系统" class="headerlink" title="Socket与操作系统"></a>Socket与操作系统</h3><p>Socket实际上是归属于应用层，使用的是运输层的TCP。在三次握手操作后，系统才会将Socket连接交给应用层，ServerSocket 才知道有一个连接过来了。那么系统当接收到一个TCP连接请求后，如果上层还没有接受它（假如SocketServer循环处理Socket，一次一个），那么系统将缓存这个连接请求，缓存是有限制的，当超过指定数量后，系统将会拒绝连接。</p><p>换句话说，<strong>系统接收TCP连接请求放入缓存队列，而SocketServer从缓存队列获取Socket。</strong></p><p>客户端为了让服务端知道自己已经发送完消息，可以选择关闭输出流<strong><code>socket.shutdownOutput()</code>，这个操作对应着四次挥手的第一次</strong>，这些都由操作系统去执行，只是Socket隐藏底层逻辑的种种细节。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.apiref.com/java11-zh/java.base/java/net/ServerSocket.html" target="_blank" rel="noopener">ServerSocket - Java 11中文版 - API参考文档 (apiref.com)</a></p><p><a href="https://www.apiref.com/java11-zh/java.base/java/net/Socket.html" target="_blank" rel="noopener">Socket - Java 11中文版 - API参考文档 (apiref.com)</a></p><p><a href="https://www.apiref.com/java11-zh/java.base/java/net/InetAddress.html" target="_blank" rel="noopener">InetAddress - Java 11中文版 - API参考文档 (apiref.com)</a></p><p><a href="https://www.cnblogs.com/yiwangzhibujian/p/7107785.html" target="_blank" rel="noopener">【Socket】Java Socket编程基础及深入讲解 - 已往之不谏 - 博客园 (cnblogs.com)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-Socket-编程&quot;&gt;&lt;a href=&quot;#Java-Socket-编程&quot; class=&quot;headerlink&quot; title=&quot;Java Socket 编程&quot;&gt;&lt;/a&gt;Java Socket 编程&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;首先需要了解两个类：Socket和SocketServer。&lt;/p&gt;
&lt;h3 id=&quot;SocketServer&quot;&gt;&lt;a href=&quot;#SocketServer&quot; class=&quot;headerlink&quot; title=&quot;SocketServer&quot;&gt;&lt;/a&gt;SocketServer&lt;/h3&gt;&lt;p&gt;SocketServer实现了服务器套接字。 服务器套接字会等待通过网络进入的请求。 用户可以根据该请求执行某些操作，然后将结果返回给请求者（也可以选择不返回）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IO" scheme="http://www.onebug.tech/tags/IO/"/>
    
      <category term="socket" scheme="http://www.onebug.tech/tags/socket/"/>
    
      <category term="网络编程" scheme="http://www.onebug.tech/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="tcp" scheme="http://www.onebug.tech/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>JAVA IO流详解</title>
    <link href="http://www.onebug.tech/2021/05/06/java/javaIO/Java%20IO%E6%B5%81/"/>
    <id>http://www.onebug.tech/2021/05/06/java/javaIO/Java%20IO%E6%B5%81/</id>
    <published>2021-05-05T16:00:00.000Z</published>
    <updated>2021-05-08T09:58:19.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-IO流"><a href="#JAVA-IO流" class="headerlink" title="JAVA IO流"></a>JAVA IO流</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p>数据的传输，可以看做是一种数据的流动，按照流动的方向，<strong>以内存为基准</strong>，分为输入Input 和输出Output ，即流向内存是输入流，流出内存的输出流，统称为 IO流。 Java中I/O操作主要是指使用java.io包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。</p><h3 id="流"><a href="#流" class="headerlink" title="流"></a>流</h3><p>流代表任何有能力产出数据的数据源对象或者是有能力接受数据的接收端对象；流的本质是数据传输，我们根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。流的具体作用是数据源和目的地建立一个输送通道。</p><a id="more"></a><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><p><strong>流向</strong></p><p>根据数据流向不同分为：</p><ul><li><p>输入流：读取外部数据（磁盘、网卡等设备的数据）到程序（内存）中。如InputStream，Reader</p></li><li><p>输出流：把程序（内存）中的内容输出到磁盘、网卡设备中。如OutputStream、Writer</p></li></ul><p><strong>类型</strong></p><p>根据处理数据类型的不同分为：</p><ul><li>字节流：可以用于读写包括二进制文件在内的任何类型文件。</li><li>字符流：可以用于读写文本文件</li></ul><p><strong>功能</strong></p><p>根据功能的不同分为：</p><ul><li>节点流：可以从或向一个特定的地方（节点）读写数据。如FileInputStream，FileReader。</li><li>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</li></ul><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><p>Java I/O 使用了装饰者模式来实现。以 InputStream 为例：</p><ul><li>InputStream 是抽象组件；</li><li>FileInputStream 是 InputStream 的子类，属于具体组件，提供了字节流的输入操作；</li><li>FilterInputStream 属于抽象装饰者，装饰者用于装饰组件，为组件提供额外的功能。例如 BufferedInputStream 为 FileInputStream 提供缓存的功能</li></ul><p><img src="http://image.onebug.tech/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39373039363934622d646230352d346363652d386432662d3163386230396634643932312e706e67" alt="img"></p><p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/xrq730/p/4908940.html" target="_blank" rel="noopener">Java设计模式12：装饰器模式 - 五月的仓颉 - 博客园 (cnblogs.com)</a></p></blockquote><h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。如果编码和解码过程使用不同的编码方式，就出现了乱码。</p><p>编码与解码的过程需要遵循某种规则，这种规则就是不同的字符编码。我们在刚刚学习编程的时候最早接触就是ASCII码，它主要是用来显示英文和一些符号，到后面还有接触到别的编码规则常用的有：gb2312，gbk，utf-8等。它们分别属于不同的编码集。</p><p>我们需要明确的是字符编码和字符集是两个不同层面的概念。</p><ul><li>encoding是charset encoding的简写，即字符集编码，简称编码。</li><li>charset是character set的简写，即字符集。</li></ul><p>编码是依赖于字符集的，<strong>一个字符集可以有多个编码实现</strong>，就像代码中的接口实现依赖于接口一样。</p><p>String 可以看成一个字符序列，可以指定一个编码方式将它编码为字节序列，也可以指定一个编码方式将一个字节序列解码为 String。如果不指定编码解码方式，默认的编码解码方式与平台有关，一般为 UTF-8。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"中文"</span>;</span><br><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(bytes, <span class="string">"UTF-8"</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure><h2 id="JAVA-IO流结构"><a href="#JAVA-IO流结构" class="headerlink" title="JAVA IO流结构"></a>JAVA IO流结构</h2><p>Java IO流中所有的接口和类都放在java.io这个包下。其中最重要的就是5个类和一个接口：</p><ul><li>File（文件特征与管理）：File类是对文件系统中文件以及文件夹进行封装的对象，可以通过对象的思想来操作文件和文件夹。 File类保存文件或目录的各种元数据信息，包括文件名、文件长度、最后修改时间、是否可读、获取当前文件的路径名，判断指定文件是否存在、获得当前目录中的文件列表，创建、删除文件和目录等方法。 </li><li>InputStream（二进制格式操作）：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。</li><li>OutputStream（二进制格式操作）：抽象类。基于字节的输出操作。是所有输出流的父类。定义了所有输出流都具有的共同特征。</li><li>Reader（文件格式操作）：抽象类，基于字符的输入操作。</li><li>Writer（文件格式操作）：抽象类，基于字符的输出操作。</li><li>RandomAccessFile（随机文件操作）：一个独立的类，直接继承至Object.它的功能丰富，可以从文件的任意位置进行存取（输入输出）操作。</li><li>Serializable（序列化操作）：是一个空接口，为对象提供标准的序列化与反序列化操作。</li></ul><p>Java IO流的整体架构图如下：</p><p><img src="http://image.onebug.tech/IO%E6%B5%81.png" alt="IO流"></p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>File类是文件和目录路径名的抽象表示形式，主要用于文件和目录的创建、查找和删除等操作。即Java中把文件或者目录（文件夹）都封装成File对象。也就是说如果我们要去操作硬盘上的文件或者目录只要创建File这个类即可。不过要注意的是File类只是对文件的操作类，只能对文件本身进行操作，不能对文件内容进行操作。</p><h3 id="File类常用方法"><a href="#File类常用方法" class="headerlink" title="File类常用方法"></a>File类常用方法</h3><p><strong>获取文件的相关信息</strong></p><ul><li>String getAbsolutePath() ：获取绝对路径名字符串。</li><li>String getName()：获取文件或目录的名称。</li><li>String getPath()：获取路径名字符串。</li><li>String getParent() ：获取路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回 null。</li><li>Long lastModified()：获取最后一次修改的时间（返回毫秒）。</li><li>Long length()：获取文件的长度，如果表示目录则返回值未指定。</li></ul><p><strong>判断功能</strong></p><ul><li>Boolean isDirectory()：判断此路径是否为一个目录</li><li>Boolean isFile()：判断是否为一个文件</li><li>Boolean exists()：判断文件或目录是否存在</li><li>Boolean canExecute()：判断文件是否可执行</li><li>Boolean canRead()：判断文件是否可读</li><li>Boolean canWrite()：判断文件是否可写</li><li>Boolean isHidden()：判断是否为隐藏文件</li></ul><p><strong>新建和删除</strong></p><ul><li>Boolean createNewFile（）：创建文件，如果文件存在则不创建，返回false，反之返回true。</li><li>Boolean mkdir（）：创建文件目录。如果此文件目录存在则不创建，如果此文件目录的上层目录不存在也不创建。</li><li>Boolean mkdirs（）： 创建文件目录。如果上层文件目录不存在也会创建。</li><li>Boolean delete（）：删除的文件或目录。如果目录下有文件或目录则不会删除。</li></ul><p><strong>目录下文件的获取</strong></p><ul><li>String[] list（）：返回一个字符串数组，获取指定目录下的所有文件或者目录名称的数组。</li><li>File[] listFiles（）：返回一个抽象路径名数组，获取指定目录下的所有文件或者目录的File数组。</li></ul><p><strong>重命名文件</strong></p><ul><li>Boolean renameTo(File dest)：把文件重命名到指定路径。</li></ul><h3 id="目录递归"><a href="#目录递归" class="headerlink" title="目录递归"></a>目录递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归地列出一个目录下所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllFiles</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dir == <span class="keyword">null</span> || !dir.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dir.isFile()) &#123;</span><br><span class="line">        System.out.println(dir.getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (File file : dir.listFiles()) &#123;</span><br><span class="line">        listAllFiles(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节操作"><a href="#字节操作" class="headerlink" title="字节操作"></a>字节操作</h2><p>无论是文本、图片、音频还是视频，所有的文件都是以二进制（字节）形式存在的，IO流中针对字节的输入输出提供了一系列的流，统称为字节流。字节流是程序中最常用的流。</p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>InputStream是所有字节输入流的父类，定义了所有字节输入流都具有的共同特征。其内部提供的方法如下（重点关注<strong>read()</strong>方法）：</p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>int</code></td><td align="left"><code>available()</code></td><td align="left">返回可以从此输入流中无阻塞地读取（或跳过）的字节数的估计值，可以是0，或者在检测到流结束时为0。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>close()</code></td><td align="left">关闭此输入流并释放与该流关联的所有系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>mark(int readlimit)</code></td><td align="left">标记此输入流中的当前位置。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>markSupported()</code></td><td align="left">测试此输入流是否支持 <code>mark</code>和 <code>reset</code>方法。</td></tr><tr><td align="left"><code>static InputStream</code></td><td align="left"><code>nullInputStream()</code></td><td align="left">返回一个不读取任何字节的新 <code>InputStream</code> 。</td></tr><tr><td align="left"><code>abstract int</code></td><td align="left"><code>read()</code></td><td align="left">从输入流中读取下一个数据字节，如果没有字节可用，因为已经到达了流的末端，则返回值-1。<strong>这个方法会阻塞，直到输入数据可用</strong>，检测到流的结束，或者抛出一个异常。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(byte[] b)</code></td><td align="left">从输入流中读取一些字节数并将它们存储到缓冲区数组 <code>b</code></td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(byte[] b, int off, int len)</code></td><td align="left">从输入流 <code>len</code>最多 <code>len</code>字节的数据读入一个字节数组。</td></tr><tr><td align="left"><code>byte[]</code></td><td align="left"><code>readAllBytes()</code></td><td align="left">从输入流中读取所有剩余字节。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>readNBytes(byte[] b, int off, int len)</code></td><td align="left">从输入流中读取请求的字节数到给定的字节数组中。</td></tr><tr><td align="left"><code>byte[]</code></td><td align="left"><code>readNBytes(int len)</code></td><td align="left">从输入流中读取指定的字节数。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>reset()</code></td><td align="left">将此流重新定位到上次在此输入流上调用 <code>mark</code>方法时的位置。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>skip(long n)</code></td><td align="left">跳过并丢弃此输入流中的 <code>n</code>字节数据。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>transferTo(OutputStream out)</code></td><td align="left">从该输入流中读取所有字节，并按读取顺序将字节写入给定的输出流。</td></tr></tbody></table><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>OutputStream是所有字节输出流的父类，定义了所有字节输出流都具有的共同特征。其内部提供的方法如下（重点关注<strong>write</strong>方法）：</p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>void</code></td><td align="left"><code>close()</code></td><td align="left">关闭此输出流并释放与此流关联的所有系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>flush()</code></td><td align="left">刷新此输出流并强制写出任何缓冲的输出字节。</td></tr><tr><td align="left"><code>static OutputStream</code></td><td align="left"><code>nullOutputStream()</code></td><td align="left">返回一个新的 <code>OutputStream</code> ，它丢弃所有字节。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(byte[] b)</code></td><td align="left">将 <code>b.length</code>字节从指定的字节数组写入此输出流。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(byte[] b, int off, int len)</code></td><td align="left">将从偏移量 <code>off</code>开始的指定字节数组中的 <code>len</code>字节写入此输出流。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>write(int b)</code></td><td align="left">将指定的字节写入此输出流。</td></tr></tbody></table><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String src, String dist)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">    FileOutputStream out = <span class="keyword">new</span> FileOutputStream(dist);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read() 最多读取 buffer.length 个字节</span></span><br><span class="line">    <span class="comment">// 返回的是实际读取的个数</span></span><br><span class="line">    <span class="comment">// 返回 -1 的时候表示读到 eof，即文件尾</span></span><br><span class="line">    <span class="keyword">while</span> ((cnt = in.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p> Reader是所有字符输入流的父类，定义了所有字符输入流都具有的共同特征。其内部提供的方法如下：</p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>abstract void</code></td><td align="left"><code>close()</code></td><td align="left">关闭流并释放与其关联的所有系统资源。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>mark(int readAheadLimit)</code></td><td align="left">标记流中的当前位置。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>markSupported()</code></td><td align="left">判断此流是否支持mark（）操作。</td></tr><tr><td align="left"><code>static Reader</code></td><td align="left"><code>nullReader()</code></td><td align="left">返回不读取任何字符的新 <code>Reader</code> 。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read()</code></td><td align="left">读一个字符。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(char[] cbuf)</code></td><td align="left">将字符读入数组。</td></tr><tr><td align="left"><code>abstract int</code></td><td align="left"><code>read(char[] cbuf, int off, int len)</code></td><td align="left">将字符读入数组的一部分。</td></tr><tr><td align="left"><code>int</code></td><td align="left"><code>read(CharBuffer target)</code></td><td align="left">尝试将字符读入指定的字符缓冲区。</td></tr><tr><td align="left"><code>boolean</code></td><td align="left"><code>ready()</code></td><td align="left">判断此流是否可以读取。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>reset()</code></td><td align="left">重置流。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>skip(long n)</code></td><td align="left">跳过字符。</td></tr><tr><td align="left"><code>long</code></td><td align="left"><code>transferTo(Writer out)</code></td><td align="left">读取此阅读器中的所有字符，并按照读取的顺序将字符写入给定的编写器。</td></tr></tbody></table><h3 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h3><p> Reader是所有字符输出流的父类，定义了所有字符输出流都具有的共同特征。其内部提供的方法如下：</p><table><thead><tr><th align="left">变量和类型</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(char c)</code></td><td align="left">将指定的字符追加到此writer。</td></tr><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(CharSequence csq)</code></td><td align="left">将指定的字符序列追加到此writer。</td></tr><tr><td align="left"><code>Writer</code></td><td align="left"><code>append(CharSequence csq, int start, int end)</code></td><td align="left">将指定字符序列的子序列追加到此writer。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>close()</code></td><td align="left">关闭流，先冲洗它。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>flush()</code></td><td align="left">刷新流。</td></tr><tr><td align="left"><code>static Writer</code></td><td align="left"><code>nullWriter()</code></td><td align="left">返回一个新的 <code>Writer</code> ，它丢弃所有字符。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(char[] cbuf)</code></td><td align="left">写一个字符数组。</td></tr><tr><td align="left"><code>abstract void</code></td><td align="left"><code>write(char[] cbuf, int off, int len)</code></td><td align="left">写一个字符数组的一部分。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(int c)</code></td><td align="left">写一个字符。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(String str)</code></td><td align="left">写一个字符串。</td></tr><tr><td align="left"><code>void</code></td><td align="left"><code>write(String str, int off, int len)</code></td><td align="left">写一个字符串的一部分。</td></tr></tbody></table><h3 id="实现逐行输出文本文件的内容"><a href="#实现逐行输出文本文件的内容" class="headerlink" title="实现逐行输出文本文件的内容"></a>实现逐行输出文本文件的内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileContent</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(fileReader);</span><br><span class="line"></span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    bufferedReader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h2><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>序列化就是将一个对象转换成字节序列，方便存储和传输。</p><ul><li>序列化：ObjectOutputStream.writeObject()</li><li>反序列化：ObjectInputStream.readObject()</li></ul><p>不会对静态变量进行序列化，因为序列化只是保存对象的状态，静态变量属于类的状态。</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>transient 关键字可以使一些属性不会被序列化。</p><p>ArrayList 中存储数据的数组 elementData 是用 transient 修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure><h3 id="Serializable示例"><a href="#Serializable示例" class="headerlink" title="Serializable示例"></a>Serializable示例</h3><p>序列化的类需要实现 Serializable 接口，它只是一个标准，没有任何方法需要实现，但是如果不去实现它的话而进行序列化，会抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    A a1 = <span class="keyword">new</span> A(<span class="number">123</span>, <span class="string">"abc"</span>);</span><br><span class="line">    String objectFile = <span class="string">"file/a1"</span>;</span><br><span class="line"></span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(objectFile));</span><br><span class="line">    objectOutputStream.writeObject(a1);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">    ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(objectFile));</span><br><span class="line">    A a2 = (A) objectInputStream.readObject();</span><br><span class="line">    objectInputStream.close();</span><br><span class="line">    System.out.println(a2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> String y;</span><br><span class="line"></span><br><span class="line">    A(<span class="keyword">int</span> x, String y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"x = "</span> + x + <span class="string">"  "</span> + <span class="string">"y = "</span> + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲"><a href="#缓冲" class="headerlink" title="缓冲"></a>缓冲</h2><p>缓冲流也叫高效流，是处理流的一种，即是作用在流上的流。其目的就是加快读取和写入数据的速度。</p><p>缓冲流本身并没有IO功能，只是在别的流上加上缓冲效果从而提高了效率。当对文件或其他目标频繁读写或操作效率低，效能差时。这时使用缓冲流能够更高效的读写信息。因为缓冲流先将数据缓存起来，然后一起写入或读取出来。所以说，缓冲流还是很重要的，在IO操作时加上缓冲流提升性能。</p><p> Java IO流中对应的缓冲流有以下四个：</p><ul><li><p>字节缓冲流：BufferedInputStream、BufferedOutputStream</p></li><li><p>字符缓冲流：BufferedReader、BufferedWriter</p></li></ul><p>实例化一个具有缓存功能的字节流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>转换流也是一种处理流，它提供了字节流和字符流之间的转换。在Java IO流中提供了两个转换流：InputStreamReader 和 OutputStreamWriter，这两个类都属于字符流。其中InputStreamReader将字节输入流转为字符输入流，继承自Reader。OutputStreamWriter是将字符输出流转为字节输出流，继承自Writer。</p><p>转换流的原理是：<strong>字符流 = 字节流 + 编码表</strong>。在转换流中选择正确的编码非常的重要，因为指定了编码，它所对应的字符集自然就指定了，否则很容易出现乱码，所以编码才是我们最终要关心的。</p><p><img src="https://img2020.cnblogs.com/blog/1745215/202103/1745215-20210328205030750-1032064608.png" alt="img"></p><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p>InputStreamReader是字节流到字符流的桥梁：它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><p>构造方法：</p><ul><li>InputStreamReader(InputStream in)：创建一个默认字符集字符输入流。</li><li>InputStreamReader(InputStream in, String charsetName)：创建一个指定字符集的字符流。</li></ul><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><p>OutputStreamWriter是字符流通向字节流的桥梁：用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><p>构造方法：</p><ul><li>OutputStreamWriter(OutputStream in): 创建一个使用默认字符集的字符流。</li><li>OutputStreamWriter(OutputStream in, String charsetName): 创建一个指定字符集的字符流。</li></ul><h3 id="转换文件编码"><a href="#转换文件编码" class="headerlink" title="转换文件编码"></a>转换文件编码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将读入UTF-8文件转换为GBK</span></span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"utf8.txt"</span>),<span class="string">"UTF-8"</span>);;</span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"gbk.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> ((len=isr.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">osw.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA-IO流&quot;&gt;&lt;a href=&quot;#JAVA-IO流&quot; class=&quot;headerlink&quot; title=&quot;JAVA IO流&quot;&gt;&lt;/a&gt;JAVA IO流&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;IO&quot;&gt;&lt;a href=&quot;#IO&quot; class=&quot;headerlink&quot; title=&quot;IO&quot;&gt;&lt;/a&gt;IO&lt;/h3&gt;&lt;p&gt;数据的传输，可以看做是一种数据的流动，按照流动的方向，&lt;strong&gt;以内存为基准&lt;/strong&gt;，分为输入Input 和输出Output ，即流向内存是输入流，流出内存的输出流，统称为 IO流。 Java中I/O操作主要是指使用java.io包下的内容，进行输入、输出操作。输入也叫做读取数据，输出也叫做作写出数据。&lt;/p&gt;
&lt;h3 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h3&gt;&lt;p&gt;流代表任何有能力产出数据的数据源对象或者是有能力接受数据的接收端对象；流的本质是数据传输，我们根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。流的具体作用是数据源和目的地建立一个输送通道。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaio" scheme="http://www.onebug.tech/categories/javaio/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IO" scheme="http://www.onebug.tech/tags/IO/"/>
    
      <category term="网络编程" scheme="http://www.onebug.tech/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>死锁</title>
    <link href="http://www.onebug.tech/2021/04/21/java/java%E5%B9%B6%E5%8F%91/ch12%E6%AD%BB%E9%94%81/"/>
    <id>http://www.onebug.tech/2021/04/21/java/java%E5%B9%B6%E5%8F%91/ch12%E6%AD%BB%E9%94%81/</id>
    <published>2021-04-20T16:00:00.000Z</published>
    <updated>2021-05-08T10:01:11.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>通俗的说，死锁就是两个或者多个线程，相互占用对方需要的资源，而都不进行释放，导致彼此之间都相互等待对方释放资源，产生了无限制等待的现象。死锁一旦发生，如果没有外力介入，这种等待将永远存在，从而对程序产生严重影响。用来描述死锁的问题最有名的场景就是“哲学家就餐问题”。</p><a id="more"></a><h3 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h3><ul><li>互斥条件：进程对锁分配的资源进行排他性使用</li><li>请求和保持条件：线程已经保持了一个资源，但是又提出了其他请求，而该资源已被其他线程占用</li><li>不剥夺条件：在使用时不能被剥夺，只能自己用完释放</li><li>环路等待条件：资源调用是一个环形的链</li></ul><h2 id="死锁示例"><a href="#死锁示例" class="headerlink" title="死锁示例"></a>死锁示例</h2><pre><code>@Slf4jpublic class DeadLock implements Runnable {    public int flag = 1;    //静态对象是类的所有对象共享的    private static Object o1 = new Object(), o2 = new Object();    @Override    public void run() {        log.info(&quot;flag:{}&quot;, flag);        if (flag == 1) {            synchronized (o1) {                try {                    Thread.sleep(500);                } catch (Exception e) {                    e.printStackTrace();                }                synchronized (o2) {                    log.info(&quot;1&quot;);                }            }        }        if (flag == 0) {            synchronized (o2) {                try {                    Thread.sleep(500);                } catch (Exception e) {                    e.printStackTrace();                }                synchronized (o1) {                    log.info(&quot;0&quot;);                }            }        }    }    public static void main(String[] args) {        DeadLock td1 = new DeadLock();        DeadLock td2 = new DeadLock();        td1.flag = 1;        td2.flag = 0;        //td1,td2都处于可执行状态，但JVM线程调度先执行哪个线程是不确定的。        //td2的run()可能在td1的run()之前运行        new Thread(td1).start();        new Thread(td2).start();    }}</code></pre><p><strong>jps jstack 定位死锁</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;jps</span><br><span class="line">&gt;jstack pid</span><br></pre></td></tr></table></figure><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>注意加锁顺序</li><li>设置加锁时限（超过时限放弃加锁）</li><li>死锁检测</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;死锁&quot;&gt;&lt;a href=&quot;#死锁&quot; class=&quot;headerlink&quot; title=&quot;死锁&quot;&gt;&lt;/a&gt;死锁&lt;/h1&gt;&lt;p&gt;通俗的说，死锁就是两个或者多个线程，相互占用对方需要的资源，而都不进行释放，导致彼此之间都相互等待对方释放资源，产生了无限制等待的现象。死锁一旦发生，如果没有外力介入，这种等待将永远存在，从而对程序产生严重影响。用来描述死锁的问题最有名的场景就是“哲学家就餐问题”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="http://www.onebug.tech/2021/04/20/java/java%E5%B9%B6%E5%8F%91/ch11%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://www.onebug.tech/2021/04/20/java/java%E5%B9%B6%E5%8F%91/ch11%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:59.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池与new-Thread"><a href="#线程池与new-Thread" class="headerlink" title="线程池与new Thread"></a>线程池与new Thread</h2><h3 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h3><ul><li>重用存在的线程，减少对象创建、消亡的开销，性能好</li><li>可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞。</li><li>提供定时执行、定期执行、单线程、并发数控制等功能。</li></ul><a id="more"></a><h3 id="new-Thread的弊端"><a href="#new-Thread的弊端" class="headerlink" title="new Thread的弊端"></a>new Thread的弊端</h3><ul><li>每次new Thread 新建对象，性能差</li><li>线程缺乏统一管理，可能无限制的新建线程，相互竞争，可能占用过多的系统资源导致死机或者OOM（out of memory 内存溢出），这种问题的原因不是因为单纯的new一个Thread，而是可能因为程序的bug或者设计上的缺陷导致不断new Thread造成的。</li><li>缺少更多功能，如更多执行、定期执行、线程中断。</li></ul><h2 id="线程池的结构"><a href="#线程池的结构" class="headerlink" title="线程池的结构"></a>线程池的结构</h2><p><img src="http://image.onebug.tech/image-20210504093153759.png" alt="image-20210504093153759"></p><p>在线程池的类图中，我们最常使用的是最下边的Executors，用它来创建线程池使用线程。那么在上边的类图中，包含了一个Executor框架，它是一个根据一组执行策略的调用调度执行和控制异步任务的框架，目的是提供一种将任务提交与任务如何运行分离开的机制。它包含了三个executor接口：</p><ul><li>Executor：运行新任务的简单接口</li><li>ExecutorService：扩展了Executor，添加了用来管理执行器生命周期和任务生命周期的方法</li><li>ScheduleExcutorService：扩展了ExecutorService，支持Future和定期执行任务</li></ul><h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="http://image.onebug.tech/20170914114339689" alt="这里写图片描述"></p><ol><li><p>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</p></li><li><p>当调用 execute() 方法添加一个任务时，线程池会做如下判断：</p><ul><li>如果正在运行的线程数量小于 <code>corePoolSize</code>，那么马上创建线程运行这个任务；</li><li>如果正在运行的线程数量大于或等于 <code>corePoolSize</code>，那么将这个任务放入队列。</li><li>如果这时候队列满了，而且正在运行的线程数量小于 <code>maximumPoolSize</code>，那么还是要创建线程运行这个任务；</li><li>如果队列满了，而且正在运行的线程数量大于或等于 <code>maximumPoolSize</code>，那么线程池会抛出异常，告诉调用者“我不能再接受任务了”。</li></ul></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p></li><li><p>当一个线程无事可做，超过一定的时间（<code>keepAliveTime</code>）时，线程池会判断，如果当前运行的线程数大于 <code>corePoolSize</code>，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 <code>corePoolSize</code> 的大小。</p></li></ol><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">    *        creates a new thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">    *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                             RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="keyword">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><code>corePoolSize</code>：指定了线程池中的线程数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到<code>workQueue</code>任务队列中去</li><li><code>maximumPoolSize</code>：指定了线程池中的最大线程数量，这个参数会根据你使用的<code>workQueue</code>任务队列的类型，决定线程池会开辟的最大线程数量；</li><li><code>keepAliveTime</code>：当线程数大于核心数时，多余的闲置线程在会在多长时间内被销毁</li><li><code>unit</code>:<code>keepAliveTime</code>的单位</li><li><code>workQueue</code>：任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；</li><li><code>threadFactory</code>:线程工厂，用于创建线程，一般用默认即可；</li><li><code>handler</code>:拒绝策略；当任务太多来不及处理时，如何拒绝任务；</li></ul><h3 id="线程池的阻塞队列"><a href="#线程池的阻塞队列" class="headerlink" title="线程池的阻塞队列"></a>线程池的阻塞队列</h3><p>通道，有以下一些阻塞队列可供选择：</p><ul><li><code>ArrayBlockingQueue</code>是一个有边界的阻塞队列，它的内部实现是一个数组。有边界的意思是它的容量是有限的，我们必须在其初始化的时候指定它的容量大小，容量大小一旦指定就不可改变。</li><li><code>DelayQueue</code>阻塞的是其内部元素，<code>DelayQueue</code>中的元素必须实现 <code>java.util.concurrent.Delayed</code>接口，该接口只有一个方法就是<code>long getDelay(TimeUnit unit)</code>，返回值就是队列元素被释放前的保持时间，如果返回0或者一个负值，就意味着该元素已经到期需要被释放，此时<code>DelayedQueue</code>会通过其take()方法释放此对象，<code>DelayQueue</code>可应用于定时关闭连接、缓存对象，超时处理等各种场景；</li><li><code>LinkedBlockingQueue</code>阻塞队列大小的配置是可选的，如果我们初始化时指定一个大小，它就是有边界的，如果不指定，它就是无边界的。说是无边界，其实是采用了默认大小为<code>Integer.MAX_VALUE</code>的容量 。它的内部实现是一个链表。</li><li><code>PriorityBlockingQueue</code>是一个没有边界的队列，它的排序规则和 <code>java.util.PriorityQueue</code>一样。需要注意，<code>PriorityBlockingQueue</code>中允许插入null对象。所有插入<code>PriorityBlockingQueue</code>的对象必须实现 <code>java.lang.Comparable</code>接口，队列优先级的排序规则就是按照我们对这个接口的实现来定义的。</li><li><code>SynchronousQueue</code>队列内部仅允许容纳一个元素。当一个线程插入一个元素后会被阻塞，除非这个元素被另一个线程消费。</li></ul><p>使用的最多的应该是<strong>LinkedBlockingQueue</strong>，注意一般情况下要配置一下队列大小，设置成有界队列，否则JVM内存会被撑爆！</p><h3 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h3><p>线程池已满的定义，是指<code>运行线程数==maximumPoolSize</code>，并且workQueue是有界队列并且已满（如果是无界队列当然永远不会满）；这时候再提交任务怎么办呢？线程池会将任务传递给最后一个参数<code>RejectedExecutionHandler</code>来处理，比如打印报错日志、抛出异常、存储到Mysql/redis用于后续处理等等，线程池默认也提供了几种处理方式：</p><ul><li>在默认的 <code>ThreadPoolExecutor.AbortPolicy</code> 中，处理程序遭到拒绝将抛出运行时<code>RejectedExecutionException</code>。</li><li>在 <code>ThreadPoolExecutor.CallerRunsPolicy</code> 中，线程调用运行该任务的execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。</li><li>在 <code>ThreadPoolExecutor.DiscardPolicy</code> 中，不能执行的任务将被删除。</li><li>在 <code>ThreadPoolExecutor.DiscardOldestPolicy</code> 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）</li><li>当然也可以自己实现处理策略类，继承<code>RejectedExecutionHandler</code>接口即可，该接口只有一个方法：<br><code>void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</code></li></ul><h3 id="线程池配置优化"><a href="#线程池配置优化" class="headerlink" title="线程池配置优化"></a>线程池配置优化</h3><p>一般需要根据任务的类型来配置线程池大小：如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1。如果是IO密集型任务，参考值可以设置为2*NCPU。</p><p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p><blockquote><p>其中NCPU的指的是CPU的核心数，可以使用<code>Runtime.getRuntime().availableProcessors()</code>来获取；</p></blockquote><h2 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h2><p>使用Executor可以创建四种线程池：分别对应上边提到的四种线程池初始化方法</p><ul><li><p><code>newCachedThreadPool</code><br>创建一个可缓存的线程池，如果线程池的长度超过了处理的需要，可以灵活回收空闲线程。如果没有可回收的就新建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的一点是，<code>newCachedThreadPool</code>的返回值是ExecutorService类型，该类型只包含基础的线程池方法，但却不包含线程监控相关方法，因此在使用返回值为ExecutorService的线程池类型创建新线程时要考虑到具体情况。</p></li><li><p><code>newFixedThreadPool</code></p><ul><li>定长线程池，可以设置线程的最大并发数，超出在队列等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>newSingleThreadExecutor</code></p><p>单线程化的线程池，用唯一的一个共用线程执行任务，保证所有任务按指定顺序执行（FIFO、优先级…）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>newScheduledThreadPool</code></p><p>定长线程池，支持定时和周期任务执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,<span class="comment">//此处super指的是ThreadPoolExecutor</span></span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ScheduledExecutorService</code>提供了三种方法可以使用：</p><ul><li><p><code>schedule</code>：在指定delay（延时）之后，执行提交Runnable的任务</p></li><li><p><code>scheduleAtFixedRate</code>：以指定的速率执行任务</p></li><li><p><code>scheduleWithFixedDelay</code>：以指定的延迟执行任务</p></li></ul></li></ul><blockquote><p><a href="https://www.cnblogs.com/dafanjoy/p/9729358.html" target="_blank" rel="noopener">java线程池ThreadPoolExecutor类使用详解 - bigfan - 博客园 (cnblogs.com)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h1&gt;&lt;h2 id=&quot;线程池与new-Thread&quot;&gt;&lt;a href=&quot;#线程池与new-Thread&quot; class=&quot;headerlink&quot; title=&quot;线程池与new Thread&quot;&gt;&lt;/a&gt;线程池与new Thread&lt;/h2&gt;&lt;h3 id=&quot;线程池的好处&quot;&gt;&lt;a href=&quot;#线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;线程池的好处&quot;&gt;&lt;/a&gt;线程池的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重用存在的线程，减少对象创建、消亡的开销，性能好&lt;/li&gt;
&lt;li&gt;可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞。&lt;/li&gt;
&lt;li&gt;提供定时执行、定期执行、单线程、并发数控制等功能。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AQS-组件</title>
    <link href="http://www.onebug.tech/2021/04/19/java/java%E5%B9%B6%E5%8F%91/ch10AQS%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.onebug.tech/2021/04/19/java/java%E5%B9%B6%E5%8F%91/ch10AQS%E7%BB%84%E4%BB%B6/</id>
    <published>2021-04-18T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:53.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AQS组件"><a href="#AQS组件" class="headerlink" title="AQS组件"></a>AQS组件</h1><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为<strong>倒数的门栓</strong>，似乎有一点【三二一，芝麻开门 】的感觉。CountDownLatch的作用也是如此，在构造CountDownLatch的时候需要传入一个整数n，在这个整数“倒数”到0之前，主线程需要等待在门口，而这个“倒数”过程则是由各个执行线程驱动的，每个线程执行完一个任务“倒数”一次。<strong>总结来说，CountDownLatch的作用就是等待其他的线程都执行完任务，必要时可以对各个任务的执行结果进行汇总，然后主线程才继续往下执行。</strong></p><a id="more"></a><p><img src="http://image.onebug.tech/image-20210504092638245.png" alt="image-20210504092638245"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">    exec.execute(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(threadNum);  <span class="comment">//需要被等待的线程执行的方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line"><span class="comment">//countDownLatch.await(10, TimeUnit.MILLISECONDS);</span></span><br><span class="line"><span class="comment">//await还可以设置等待的时间（参数1：等待的时间长度; 参数2：等待的时间单位）</span></span><br><span class="line">log.info(<span class="string">"analyze here"</span>)</span><br></pre></td></tr></table></figure><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>信号量在操作系统中是很重要的概念，Java并发库里的Semaphore就可以很轻松的完成类似操作系统信号量的控制。它可以很容易<strong>控制系统中某个资源被同时访问的线程个数</strong>。Semaphore常用来做流量分流，特别是对公共资源有限的场景，比如数据库连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、普通调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     semaphore.acquire(); <span class="comment">// 获取一个许可</span></span><br><span class="line">     test();<span class="comment">//需要并发控制的内容</span></span><br><span class="line">     semaphore.release(); <span class="comment">// 释放一个许可</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、同时获取多个许可，同时释放多个许可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     semaphore.acquire(<span class="number">2</span>);</span><br><span class="line">     test();</span><br><span class="line">     semaphore.release(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 3、尝试获取许可，获取不到不执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (semaphore.tryAcquire()) &#123;</span><br><span class="line">        test(threadNum);</span><br><span class="line">        semaphore.release();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 4、尝试获取许可一段时间，获取不到不执行</span></span><br><span class="line"><span class="comment"> * 参数1：等待时间长度  参数2：等待时间单位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (semaphore.tryAcquire(<span class="number">5000</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        test(threadNum);</span><br><span class="line">        semaphore.release(); </span><br><span class="line">     &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicBarrier也叫同步屏障，<strong>可以让一组线程达到一个屏障时被阻塞，直到最后一个线程达到屏障时，所以被阻塞的线程才能继续执行</strong>。CyclicBarrier好比一扇门，默认情况下关闭状态，堵住了线程执行的道路，直到所有线程都就位，门才打开，让所有线程一起通过。</p><p><img src="http://image.onebug.tech/image-20210504092709136.png" alt="image-20210504092709136"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//想象一个场景，运动会男子100米决赛，5名选手。每个运动员都就位后才开始。</span></span><br><span class="line"><span class="comment">//公共线程循环调用方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        executor.execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                race(threadNum);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法1：每个线程都持续等待</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">    barrier.await();</span><br><span class="line">    log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法2：每个线程只等待一段时间</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        barrier.await(<span class="number">2000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException | TimeoutException e) &#123;</span><br><span class="line">        log.warn(<span class="string">"BarrierException"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用方法3：在初始化的时候设置runnable，当线程达到屏障时优先执行runnable</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">    log.info(<span class="string">"callback is running"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>与CountDownLatch区别</strong></p><ul><li>计数器可重复用</li><li>描述一个或多个线程等待其他线程的关系/多个线程相互等待</li></ul><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>通常创建一个线程有2种方式，一种是直接继承Thread，另外一种就是实现Runnable接口。这2种方式都有一个缺陷就是：<strong>在执行完任务之后无法获取执行结果</strong>。如果需要获取执行结果，就必须通过共享变量或者使用线程通信的方式来达到效果，这样使用起来就比较麻烦。而自从Java 1.5开始，就提供了Callable和Future，通过它们可以在任务执行完毕之后得到任务执行结果。</p><p><strong>Callable与Runnable</strong></p><p>先说一下<code>java.lang.Runnable</code>吧，它是一个接口，在它里面只声明了一个run()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于run()方法返回值为void类型，所以在执行完任务之后无法返回任何结果。</p><p>Callable位于<code>java.util.concurrent</code>包下，它也是一个接口，在它里面也只声明了一个方法，只不过这个方法叫做call()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这是一个泛型接口，call()函数返回的类型就是传递进来的V类型。</p><p>那么怎么使用Callable呢？一般情况下是配合ExecutorService来使用的，在ExecutorService接口中声明了若干个submit方法的重载版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line">Future&lt;?&gt; submit(Runnable task);</span><br></pre></td></tr></table></figure><p><strong>Future</strong></p><p>Future就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。</p><p>Future类位于<code>java.util.concurrent</code>包下，它是一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说Future提供了三种功能：</p><ul><li>判断任务是否完成；</li><li>能够中断任务；</li><li>能够获取任务执行结果。</li></ul><p>因为Future只是一个接口，所以是无法直接用来创建对象使用的，因此就有了下面的FutureTask。</p><p><strong>FutureTask</strong></p><p>FutureTask类实现了RunnableFuture接口，RunnableFuture继承了Runnable接口和Future接口，而FutureTask实现了RunnableFuture接口。所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">"do something in callable"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Done"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        log.info(<span class="string">"do something in main"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        String result = futureTask.get();</span><br><span class="line">        log.info(<span class="string">"result：&#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><p>ForkJoin是Java7提供的一个并行执行任务的框架，是把大任务分割成若干个小任务，待小任务完成后将结果汇总成大任务结果的框架。主要采用的是<strong>工作窃取算法</strong>，工作窃取算法是指某个线程从其他队列里窃取任务来执行。</p><p><img src="http://image.onebug.tech/image-20210504092914046.png" alt="image-20210504092914046"></p><p>在窃取过程中两个线程会访问同一个队列，为了减少窃取任务线程和被窃取任务线程之间的竞争，通常我们会使用<strong>双端队列</strong>来实现工作窃取算法。被窃取任务的线程永远从队列的头部拿取任务，窃取任务的线程从队列尾部拿取任务。</p><p><strong>局限性</strong></p><ul><li>任务只能使用fork和join作为同步机制，如果使用了其他同步机制，当他们在同步操作时，工作线程就不能执行其他任务了。比如在fork框架使任务进入了睡眠，那么在睡眠期间内在执行这个任务的线程将不会执行其他任务了</li><li>所拆分的任务不应该去执行IO操作，如读和写数据文件。</li><li>任务不能抛出检查异常。必须通过必要的代码来处理他们。</li></ul><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟加和运算</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTaskExample</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold = <span class="number">2</span>;<span class="comment">//设定不大于两个数相加就直接for循环，不适用框架</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinTaskExample</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果任务足够小就计算任务</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= threshold;</span><br><span class="line">        <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果任务大于阈值，就分裂成两个子任务计算（分裂算法，可依情况调优）</span></span><br><span class="line">            <span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            ForkJoinTaskExample leftTask = <span class="keyword">new</span> ForkJoinTaskExample(start, middle);</span><br><span class="line">            ForkJoinTaskExample rightTask = <span class="keyword">new</span> ForkJoinTaskExample(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行子任务</span></span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待任务执行结束合并其结果</span></span><br><span class="line">            <span class="keyword">int</span> leftResult = leftTask.join();</span><br><span class="line">            <span class="keyword">int</span> rightResult = rightTask.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并子任务</span></span><br><span class="line">            sum = leftResult + rightResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ForkJoinPool forkjoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个计算任务，计算1+2+3+4...100</span></span><br><span class="line">        ForkJoinTaskExample task = <span class="keyword">new</span> ForkJoinTaskExample(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行一个任务</span></span><br><span class="line">        Future&lt;Integer&gt; result = forkjoinPool.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"result:&#123;&#125;"</span>, result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><p>BlockingQueue接口表示一个线程安全的队列，可以放入并获取实例。BlockingQueue通常用于使线程产生对象，而另一线程则使用该对象。主要应用场景就是：生产者消费者模型。</p><p><img src="http://image.onebug.tech/1992310-df4b4820c16642be.png" alt="img"></p><p>生产线程将持续生产新对象并将它们插入队列，直到队列达到它可以包含的上限。换句话说，这是极限。如果阻塞队列达到其上限，则会在尝试插入新对象时阻塞生产线程。在消耗线程将对象带出队列之前，它一直处于阻塞状态。消费线程不断将对象从阻塞队列中取出，并对其进行处理。如果消费线程试图将对象从空队列中取出，则消费线程将被阻塞，直到生成的线程将对象放入队列。</p><p><strong>方法</strong></p><p>BlockingQueue有4种不同的方法来插入、删除和检查队列中的元素。每一组方法的行为都是不同的，以防被请求的操作不能立即执行。下面是这些方法的一个表：</p><table><thead><tr><th align="center"></th><th align="center">Throws Exception</th><th align="center">Special Value</th><th align="center">Blocks</th><th align="center">Times out</th></tr></thead><tbody><tr><td align="center">Insert</td><td align="center">add(o)</td><td align="center">offer(o)</td><td align="center">put(o)</td><td align="center">offer(o, timeout, timeunit)</td></tr><tr><td align="center">Remove</td><td align="center">remove(o)</td><td align="center">poll()</td><td align="center">take()</td><td align="center">poll(timeout, timeunit)</td></tr><tr><td align="center">Examine</td><td align="center">element()</td><td align="center">peek()</td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><ul><li>Throws Exception: 如果尝试的操作不可能立即发生，则抛出一个异常。</li><li>Special Value  ：如果尝试的操作不能立即执行，则会返回一个特殊值（通常为true / false）。</li><li>Blocks：如果尝试的操作不可能立即执行，那么该方法将阻塞。</li><li>Times out：如果尝试的操作不可能立即执行，则该方法调用将阻塞，但不会超过给定的超时。<br> 返回一个特殊值，告诉操作是否成功（通常为true / false）。</li></ul></blockquote><p><strong>实现</strong></p><p>由于BlockingQueue是一个接口，因此您需要使用它的一个实现来使用它。java.util.concurrent包具有以下BlockingQueue接口（在Java 6中）的实现：</p><ul><li>ArrayBlockingQueue</li><li>DelayQueue</li><li>LinkedBlockingQueue]</li><li>PriorityBlockingQueue</li><li>SynchronousQueue</li></ul><p><strong>使用</strong></p><p>该示例使用BlockingQueue接口的ArrayBlockingQueue实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BlockingQueueExample类在不同的线程中启动生产者和消费者。生产者将字符串插入共享BlockingQueue中，消费者将它们取出。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(queue);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(queue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是生产者类。注意它在每个put（）调用之间的使用sleep。这将导致消费者在等待队列中的对象时阻塞。</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BlockingQueue queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queue.put(<span class="string">"1"</span>);</span><br><span class="line">            log.info(<span class="string">"put 1"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            queue.put(<span class="string">"2"</span>);</span><br><span class="line">            log.info(<span class="string">"put 2"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            queue.put(<span class="string">"3"</span>);</span><br><span class="line">            log.info(<span class="string">"put 3"</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是消费者类。它只是从队列中取出对象，并将它们打印到System.out。</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BlockingQueue queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"take &#123;&#125;"</span>,queue.take());</span><br><span class="line">            log.info(<span class="string">"take &#123;&#125;"</span>,queue.take());</span><br><span class="line">            log.info(<span class="string">"take &#123;&#125;"</span>,queue.take());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">27.756</span> [Thread-<span class="number">0</span>] INFO com.mmall.concurrency.example.aqs.Producer - put <span class="number">1</span></span><br><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">27.756</span> [Thread-<span class="number">1</span>] INFO com.mmall.concurrency.example.aqs.Consumer - take <span class="number">1</span></span><br><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">28.776</span> [Thread-<span class="number">0</span>] INFO com.mmall.concurrency.example.aqs.Producer - put <span class="number">2</span></span><br><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">28.776</span> [Thread-<span class="number">1</span>] INFO com.mmall.concurrency.example.aqs.Consumer - take <span class="number">2</span></span><br><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">29.790</span> [Thread-<span class="number">0</span>] INFO com.mmall.concurrency.example.aqs.Producer - put <span class="number">3</span></span><br><span class="line"><span class="number">19</span>:<span class="number">15</span>:<span class="number">29.790</span> [Thread-<span class="number">1</span>] INFO com.mmall.concurrency.example.aqs.Consumer - take <span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AQS组件&quot;&gt;&lt;a href=&quot;#AQS组件&quot; class=&quot;headerlink&quot; title=&quot;AQS组件&quot;&gt;&lt;/a&gt;AQS组件&lt;/h1&gt;&lt;h2 id=&quot;CountDownLatch&quot;&gt;&lt;a href=&quot;#CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;CountDownLatch&quot;&gt;&lt;/a&gt;CountDownLatch&lt;/h2&gt;&lt;p&gt;CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为&lt;strong&gt;倒数的门栓&lt;/strong&gt;，似乎有一点【三二一，芝麻开门 】的感觉。CountDownLatch的作用也是如此，在构造CountDownLatch的时候需要传入一个整数n，在这个整数“倒数”到0之前，主线程需要等待在门口，而这个“倒数”过程则是由各个执行线程驱动的，每个线程执行完一个任务“倒数”一次。&lt;strong&gt;总结来说，CountDownLatch的作用就是等待其他的线程都执行完任务，必要时可以对各个任务的执行结果进行汇总，然后主线程才继续往下执行。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AQS-锁</title>
    <link href="http://www.onebug.tech/2021/04/19/java/java%E5%B9%B6%E5%8F%91/ch9AQS%E9%94%81/"/>
    <id>http://www.onebug.tech/2021/04/19/java/java%E5%B9%B6%E5%8F%91/ch9AQS%E9%94%81/</id>
    <published>2021-04-18T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:47.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AQS锁"><a href="#AQS锁" class="headerlink" title="AQS锁"></a>AQS锁</h1><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><strong>ReentrantLock的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建锁：使用Lock对象声明，使用ReentrantLock接口创建</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">//使用锁：在需要被加锁的方法中使用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方面：</span></span><br><span class="line"><span class="comment">//在new ReentrantLock的时候默认给了一个不公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以加参数来初始化指定使用公平锁还是不公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能：</p><ul><li>tryLock()：仅在调用时锁定未被另一个线程保持的情况下才获取锁定。</li><li>tryLock(long timeout, TimeUnit unit)：如果锁定在给定的时间内没有被另一个线程保持且当前线程没有被中断，则获取这个锁定。</li><li>lockInterruptbily：如果当前线程没有被中断的话，那么就获取锁定。如果中断了就抛出异常。</li><li>isLocked：查询此锁定是否由任意线程保持</li><li>isHeldByCurrentThread：查询当前线程是否保持锁定状态。</li><li>isFair：判断是不是公平锁</li><li>……</li></ul><p><strong>与synchronized的区别</strong></p><ul><li>可重入性：两者的锁都是可重入的，差别不大，有线程进入锁，计数器自增1，等下降为0时才可以释放锁</li><li>锁的实现：synchronized是基于JVM实现，ReentrantLock是JDK实现的。</li><li>性能区别：在最初的时候，二者的性能差别差很多，当synchronized引入了偏向锁、轻量级锁（自旋锁）后，二者的性能差别不大，官方推荐synchronized（优化时其实是借用了ReentrantLock的CAS技术，试图在用户态就把问题解决，避免进入内核态造成线程阻塞）</li><li>功能区别：<ul><li>便利性：synchronized更便利，它是由编译器保证加锁与释放。ReentrantLock是需要手动释放锁，所以为了避免忘记手工释放锁造成死锁，所以最好在finally中声明释放锁。</li><li>锁的细粒度和灵活度，ReentrantLock优于synchronized</li></ul></li></ul><p><strong>ReentrantLock独有的功能</strong></p><ul><li><p>可以指定是公平锁还是<strong>非公平锁</strong>，sync只能是非公平锁。</p><blockquote><p>公平锁就是先等待的线程先获得锁</p></blockquote></li><li><p>提供了一个Condition类，可以<strong>分组唤醒</strong>需要唤醒的线程，而synchronized要么随机唤醒一个线程，要么全部唤醒。</p></li><li><p>通过<code>lock.lockInterruptibly()</code>提供能够中断等待锁的线程的功能</p></li><li><p>ReentrantLock是一种自旋锁，通过循环调用CAS操作来实现加锁。由于避免了进入内核态的阻塞状态，性能比较好。</p></li></ul><p><strong>是否弃用synchronized？</strong></p><p>从上边的介绍，看上去ReentrantLock不仅拥有synchronized的所有功能，而且有一些功能synchronized无法实现的特性。性能方面，ReentrantLock也不比synchronized差，那么到底我们要不要放弃使用synchronized呢？<strong>答案是不要这样做</strong>。</p><p>J.U.C包中的锁类是高级用户的工具，除非说你对Lock的高级特性有特别清楚的了解以及有明确的需求，或有明确的证据表明同步已经成为可伸缩性的瓶颈的时候，否则我们还是继续使用synchronized。相比较这些高级的锁定类，synchronized还是有一些优势的，比如synchronized不需要手动释放锁。还有当JVM使用synchronized管理锁定请求和释放时，JVM在生成线程转储时能够包括锁定信息，这些信息对调试非常有价值，它们可以标识死锁以及其他异常行为的来源。</p><p><strong>如何选择锁？</strong></p><ul><li>当只有少量竞争者，使用synchronized</li><li>竞争者不少但是线程增长的趋势是能预估的，使用ReetrantLock</li></ul><h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><p>ReentrantReadWriteLock（读写锁）允许多个线程在没有写入时同时读取，只允许一个线程写入。如果一直存在读操作，那么写锁一直在等待没有读的情况出现，这样我的写锁就永远也获取不到，就会<strong>造成等待获取写锁的线程饥饿</strong>。平时使用的场景并不多，平时使用的场景并不多。</p><h2 id="StempedLock"><a href="#StempedLock" class="headerlink" title="StempedLock"></a>StempedLock</h2><p>要进一步提升并发执行效率，Java 8引入了新的读写锁：StampedLock。改进之处在于：读的过程中也允许获取写锁后写入，这样一来，我们读的数据就可能不一致，所以，需要一点额外的代码来判断读的过程中是否有写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock stampedLock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.writeLock(); <span class="comment">// 获取写锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x += deltaX;</span><br><span class="line">            y += deltaY;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stampedLock.unlockWrite(stamp); <span class="comment">// 释放写锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = stampedLock.tryOptimisticRead(); <span class="comment">// 获得一个乐观读锁</span></span><br><span class="line">        <span class="comment">// 注意下面两行代码不是原子操作</span></span><br><span class="line">        <span class="comment">// 假设x,y = (100,200)</span></span><br><span class="line">        <span class="keyword">double</span> currentX = x;</span><br><span class="line">        <span class="comment">// 此处已读取到x=100，但x,y可能被写线程修改为(300,400)</span></span><br><span class="line">        <span class="keyword">double</span> currentY = y;</span><br><span class="line">        <span class="comment">// 此处已读取到y，如果没有写入，读取是正确的(100,200)</span></span><br><span class="line">        <span class="comment">// 如果有写入，读取是错误的(100,400)</span></span><br><span class="line">        <span class="keyword">if</span> (!stampedLock.validate(stamp)) &#123; <span class="comment">// 检查乐观读锁后是否有其他写锁发生</span></span><br><span class="line">            stamp = stampedLock.readLock(); <span class="comment">// 获取一个悲观读锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentX = x;</span><br><span class="line">                currentY = y;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stampedLock.unlockRead(stamp); <span class="comment">// 释放悲观读锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和ReadWriteLock相比，写入的加锁是完全一样的，不同的是读取。注意到首先我们通过<code>tryOptimisticRead()</code>获取一个乐观读锁，并返回版本号。接着进行读取，读取完成后，我们通过<code>validate()</code>去验证版本号，如果在读取过程中没有写入，版本号不变，验证成功，我们就可以放心地继续后续操作。如果在读取过程中有写入，版本号会发生变化，验证将失败。在失败的时候，我们再通过获取悲观读锁再次读取。由于写入的概率不高，程序在绝大部分情况下可以通过乐观读锁获取数据，极少数情况下使用悲观读锁获取数据。</p><p>可见，StampedLock把读锁细分为乐观读和悲观读，能进一步提升并发效率。但这也是有代价的：一是代码更加复杂，二是StampedLock是不可重入锁，不能在一个线程中反复获取同一个锁。</p><blockquote><p>乐观锁的意思就是乐观地估计读的过程中大概率不会有写入，因此被称为乐观锁。反过来，悲观锁则是读的过程中拒绝有写入，也就是写入必须等待。显然乐观锁的并发效率更高，但一旦有小概率的写入导致读取的数据不一致，需要能检测出来，再读一遍就行</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AQS锁&quot;&gt;&lt;a href=&quot;#AQS锁&quot; class=&quot;headerlink&quot; title=&quot;AQS锁&quot;&gt;&lt;/a&gt;AQS锁&lt;/h1&gt;&lt;h2 id=&quot;ReentrantLock&quot;&gt;&lt;a href=&quot;#ReentrantLock&quot; class=&quot;headerlink&quot; title=&quot;ReentrantLock&quot;&gt;&lt;/a&gt;ReentrantLock&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;ReentrantLock的使用&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建锁：使用Lock对象声明，使用ReentrantLock接口创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Lock lock = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//使用锁：在需要被加锁的方法中使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AQS</title>
    <link href="http://www.onebug.tech/2021/04/18/java/java%E5%B9%B6%E5%8F%91/ch8AQS/"/>
    <id>http://www.onebug.tech/2021/04/18/java/java%E5%B9%B6%E5%8F%91/ch8AQS/</id>
    <published>2021-04-17T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:41.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p> AQS（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量来表示状态，通过内置的FIFO（first in，first out）队列来完成资源获取线程的排队工作。</p><a id="more"></a><h2 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h2><p>同步队列（一个FIFO双向队列）是AQS的核心，用来完成同步状态的管理，当线程获取同步状态失败时，AQS会将当前线程以及等待状态等信息构造成一个节点并加入到同步队列，同时会阻塞当前线程。</p><p><img src="https://img2018.cnblogs.com/blog/1055780/201911/1055780-20191129233118009-1456342769.png" alt="img"></p><h3 id="同步状态"><a href="#同步状态" class="headerlink" title="同步状态"></a>同步状态</h3><p>AQS中维持一个全局的int状态码<strong>state</strong>，线程通过修改（加/减指定的数量）码是否成功来决定当前线程是否成功获取到同步状态。</p><p>AQS支持两种获取同步状态的模式既独占式和共享式。顾名思义，独占式模式同一时刻只允许一个线程获取同步状态，而共享模式则允许多个线程同时获取。</p><p><img src="http://image.onebug.tech/1055780-20191129233117600-2113769929.jpg" alt="img"></p><h3 id="独占模式获取与释放状态"><a href="#独占模式获取与释放状态" class="headerlink" title="独占模式获取与释放状态"></a>独占模式获取与释放状态</h3><p>独占模式既同一时间只能由一个线程持有同步状态。当多个线程竞争时(acquire)，获取到同步状态的线程会将当前线程赋值给<code>Thread exclusiveOwnerThread</code>属性（AQS父类中）来标记当前状态被线程独占。其他线程将被构造成Node加入到同步队列中。</p><p><strong>获取同步状态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取同步状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. tryAcquire    尝试获取同步状态; </span></span><br><span class="line"><span class="comment">     * 2.1 addWaiter     如果尝试获取到同步状态失败，则加入到同步队列中; </span></span><br><span class="line"><span class="comment">     * 2.2 acquireQueued 在队列中尝试获取同步状态.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>多线程并发获取（修改）同步状态, 修改同步状态成功的线程标记为拥有同步状态</li></ol><p><img src="http://image.onebug.tech/1055780-20191129233118430-1256054001.png" alt="img"></p><ol start="2"><li>获取失败的线程，加入到同步队列的队尾；加入到队列中后，如果当前节点的前驱节点为头节点再次尝试获取同步状态。如果头节点的下一个节点尝试获取同步状态失败后，会进入等待状态；其他节点则继续自旋。</li></ol><p><img src="http://image.onebug.tech/1055780-20191129233118771-1689741253.png" alt=""></p><p><img src="https://img2018.cnblogs.com/blog/1055780/201911/1055780-20191129233119143-1476789162.png" alt="img"></p><p>总结：</p><p><img src="http://image.onebug.tech/1055780-20191129233119985-476209714.png" alt="img"></p><p><strong>释放同步状态</strong></p><p>当线程执行完相应逻辑后，需要释放同步状态，使后继节点有机会同步状态（让出资源，让排队的线程使用）。这时就需要调用release(int arg)方法。调用该方法后，会唤醒后继节点。</p><ol><li>释放同步状态，唤醒后继节点</li></ol><p><img src="http://image.onebug.tech/1055780-20191129233120861-935232279.png" alt="img"></p><ol start="2"><li><p>后继节点获取同步状态成功，头节点出队。需要注意的事，出队操作是间接的，有节点获取到同步状态时，会将当前节点设置为head，而原本的head设置为null。</p><blockquote><p>当同步队列中头节点唤醒后继节点时，此时可能有其他线程尝试获取同步状态。假设获取成功，将会被设置为头节点。头节点后续节点获取同步状态失败。</p></blockquote><p><img src="http://image.onebug.tech/1055780-20191129233121530-1946057717.png" alt="img"></p></li></ol><h3 id="共享模式获取与释放状态"><a href="#共享模式获取与释放状态" class="headerlink" title="共享模式获取与释放状态"></a>共享模式获取与释放状态</h3><p>共享模式和独占模式最主要的区别是在<strong>支持同一时刻有多个线程同时获取同步状态</strong>。为了避免带来额外的负担，在上文中提到的同步队列中都是用独占模式进行讲述，其实同步队列中的节点应该是独占和共享节点并存的。</p><p><img src="https://img2018.cnblogs.com/blog/1055780/201911/1055780-20191129233125056-1459011349.png" alt="img"></p><p><strong>获取同步状态</strong></p><ol><li>首先至少要调用一次tryAcquireShared(arg)方法，如果返回值大于等于0表示获取成功。</li><li>当获取锁失败时，则创建一个共享类型的节点并进入一个同步队列，然后进入队列中进入自旋状态（阻塞，唤醒两种状态来回切换，直到获取到同步状态为止）</li><li>当队列中的等待线程被唤醒以后就重新尝试获取锁资源，如果成功则<strong>唤醒后面还在等待的共享节点并把该唤醒事件传递下去，即会依次唤醒在该节点后面的所有共享节点</strong>，否则继续挂起等待。</li></ol><p><img src="http://image.onebug.tech/1055780-20191129233126033-2079605281.png" alt="img"></p><p>当一个同享节点获取到同步状态，并唤醒后面等待的共享状态的结果如下图所示：</p><p><img src="http://image.onebug.tech/1055780-20191129233127018-1280581551.png" alt="img"></p><p><strong>释放同步状态</strong></p><p>释放同步状态后，同步队列的变化过程和共享节点获取到同步状态后的变化过程一致，此处不再进行赘述。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>AQS通过一个int同步状态码，和一个（先进先出）队列来控制多个线程访问资源</strong></li><li>支持独占和共享两种模式获取同步状态码</li><li><strong>当线程获取同步状态失败会被加入到同步队列中</strong></li><li>当线程释放同步状态，会唤醒后继节点来获取同步状态</li><li><strong>共享模式下的节点获取到同步状态或者释放同步状态时，不仅会唤醒后继节点，还会向后传播，唤醒所有同步节点</strong></li><li><strong>使用volatile关键字保证状态码在线程间的可见性，CAS操作保证修改状态码过程的原子性。</strong></li></ul><h2 id="条件队列"><a href="#条件队列" class="headerlink" title="条件队列"></a>条件队列</h2><p>条件队列：当某个线程调用了wait方法，或者通过Condition对象调用了await相关方法，线程就会进入阻塞状态，并加入到对应条件队列中。</p><p>即当对象获取到同步锁之后，如果调用了wait方法，当前线程会进入到条件队列中，并释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123; <span class="comment">// 获取锁失败，线程会加入到同步队列中 </span></span><br><span class="line"><span class="keyword">while</span>(条件不满足)&#123;</span><br><span class="line">对象.wait();<span class="comment">// 调用wait方法当前线程加入到条件队列中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于synchcronized的内置条件队列存在一些缺陷。<strong>每个内置锁都只能有一个相关联的条件队列</strong>，因而存在多个线程可能在同一个条件队列上等待不同的条件谓词，并且在最常见的加锁模式下公开条件队列对象。</p><p>与Object配合synchronized相比，基于AQS的Lock&amp;Condition实现的等待唤醒模式更加灵活，<strong>支持多个条件队列，支持等待状态中不响应中断以及超时等待功能</strong>； 其次就是<strong>基于AQS实现的条件队列是”肉眼可见”的</strong>，我们可以通过源代码进行debug，而synchronized则是完全隐式的。</p><h3 id="同步队列和条件队列"><a href="#同步队列和条件队列" class="headerlink" title="同步队列和条件队列"></a>同步队列和条件队列</h3><p>与条件队列密不可分的类则是ConditionObject， 是AQS中实现了Condition接口的内部类，通常配合基于AQS实现的锁一同使用。当线程获取到锁之后，可以调用await方法进入条件队列并释放锁，或者调用singinal方法唤醒对应条件队列中等待时间最久的线程并加入到等待队列中。</p><p>在AQS中，线程会被封装成Node对象加入队列中，而<strong>条件队列中则复用了同步队列中的Node对象</strong>。</p><p><img src="http://image.onebug.tech/201912222329_295.jpg" alt="img"></p><h3 id="Condition相关方法和使用"><a href="#Condition相关方法和使用" class="headerlink" title="Condition相关方法和使用"></a>Condition相关方法和使用</h3><p>Condition接口一共定义了以下几个方法：</p><ul><li><strong>await():</strong> 当前线程进入等待状态，直到被通知(siginal)或中断【和wait方法语义相同】。</li><li><strong>awaitUninterruptibly():</strong> 当前线程进入等待状态，直到被通知，对中断不敏感。</li><li><strong>awaitNanos(long timeout):</strong> 当前线程进入等待状态直到被通知(siginal)，中断或超时。</li><li><strong>awaitUnitil(Date deadTime):</strong> 当前线程进入等待状态直到被通知(siginal)，中断或到达某个时间。</li><li><strong>signal():</strong> 唤醒一个等待在Condition上的线程，该线程从等待方法返回前必须获得与Condition关联的锁【和notify方法语义相同】</li><li><strong>signalAll():</strong> 唤醒所有等待在Condition上的线程，能够从等待方法返回的线程必须获得与Condition关联的锁【和notifyAll方法语义相同】。</li></ul><p><strong>使用</strong></p><p>下面是一个线程等待与唤醒的例子，其中用1234序号标出了日志输出顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    Condition condition = reentrantLock.newCondition();<span class="comment">//创建condition</span></span><br><span class="line">    <span class="comment">//线程1</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            log.info(<span class="string">"wait signal"</span>); <span class="comment">// 1</span></span><br><span class="line">            condition.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"get signal"</span>); <span class="comment">// 4</span></span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="comment">//线程2</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        reentrantLock.lock();</span><br><span class="line">        log.info(<span class="string">"get lock"</span>); <span class="comment">// 2</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        condition.signalAll();<span class="comment">//发送信号</span></span><br><span class="line">        log.info(<span class="string">"send signal"</span>); <span class="comment">// 3</span></span><br><span class="line">        reentrantLock.unlock();</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：</p><ol><li>线程1调用了reentrantLock.lock()，线程进入AQS等待队列，输出”wait signal”</li><li>接着调用了awiat方法，线程从AQS队列中移除，锁释放，直接加入condition的等待队列中</li><li>线程2因为线程1释放了锁，拿到了锁，输出”get lock”</li><li>线程2执行condition.signalAll()发送信号，输出”send signal”</li><li>condition队列中线程1的节点接收到信号，从condition队列中拿出来放入到了AQS的等待队列，这时线程1并没有被唤醒。</li><li>线程2调用unlock释放锁，因为AQS队列中只有线程1，因此AQS释放锁按照从头到尾的顺序，唤醒线程1</li><li>线程1继续执行，输出”get signal”，并进行unlock操作。</li></ol></blockquote><h3 id="条件队列入队操作"><a href="#条件队列入队操作" class="headerlink" title="条件队列入队操作"></a>条件队列入队操作</h3><p>当线程获取到锁之后，Condition对象调用await相关的方法，线程会从同步队列中退出，进入到对应的条件队列中。</p><p><img src="http://image.onebug.tech/201912222331_843.jpg" alt="img"></p><h3 id="条件队出队操作"><a href="#条件队出队操作" class="headerlink" title="条件队出队操作"></a>条件队出队操作</h3><p>Condition对象调用signal或者signalAll方法时，方法唤醒对应条件队列中的相关线程并加入到同步队列中。</p><p><img src="http://image.onebug.tech/201912222332_191.jpg" alt="img"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>条件队列和同步队列在Java中有两种实现：synchronized关键字和基于AQS</li><li>每个（基于synchronized的）内置锁都只能有一个相关联的条件队列，会存在多个线程可能在同一个条件队列上等待不同的条件谓词；而（基于AQS实现的）显式锁支持多个条件队列</li><li>与wait，notify，notifyAll 对应的方法时Conditoin接口中的await，signal，signalAll，他们具有相同的语义</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AQS&quot;&gt;&lt;a href=&quot;#AQS&quot; class=&quot;headerlink&quot; title=&quot;AQS&quot;&gt;&lt;/a&gt;AQS&lt;/h1&gt;&lt;p&gt; AQS（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量来表示状态，通过内置的FIFO（first in，first out）队列来完成资源获取线程的排队工作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>并发容器</title>
    <link href="http://www.onebug.tech/2021/04/17/java/java%E5%B9%B6%E5%8F%91/ch7%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.onebug.tech/2021/04/17/java/java%E5%B9%B6%E5%8F%91/ch7%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</id>
    <published>2021-04-16T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:35.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><p>Java并发容器JUC是三个单词的缩写。是JDK下面的一个包名。即<code>Java.util.concurrency</code>。</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList 写操作时复制，当有新元素添加到集合中时，从原有的数组中拷贝一份出来，然后在新的数组上作写操作，将原来的数组指向新的数组。整个数组的add操作都是在锁的保护下进行的，防止并发时复制多份副本。读操作是在原数组中进行，不需要加锁。</p><a id="more"></a><p><strong>源码分析</strong></p><p>下面首先展示了CopyOnWriteArrayList中比较重要的成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** The lock protecting all mutators */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The array, accessed only via getArray/setArray. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure><p>CopyOnWriteArrayList使用了ReentrantLock来支持并发操作，array就是实际存放数据的数组对象。ReentrantLock是一种支持重入的独占锁，任意时刻只允许一个线程获得锁。下面首先展示了add方法的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock(); <span class="comment">//上锁，只允许一个线程进入</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray(); <span class="comment">// 获得当前数组对象</span></span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);<span class="comment">//拷贝到一个新的数组中</span></span><br><span class="line">        newElements[len] = e;<span class="comment">//插入数据元素</span></span><br><span class="line">        setArray(newElements);<span class="comment">//将新的数组对象设置回去</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来分析一下读操作，下面是get方法的细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现是非常简单的，而且<strong>读是允许多个线程进入的</strong>。</p><p>下面来分析一下CopyOnWriteArrayList的迭代器。下面是两个重要的变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** Snapshot of the array */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</span><br><span class="line"><span class="comment">/** Index of element to be returned by subsequent call to next.  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br></pre></td></tr></table></figure><p><strong>遍历的时候首先会获得当前数组对象的一个拷贝，称为快照，然后遍历的操作会在该快照上进行。</strong>获取了迭代器之后再对CopyOnWriteArrayList进行写操作会，迭代器不会感知到这种变化。每一个线程都将获得当前时刻的一个快照，所以不需要加锁就可以安全的实现遍历。</p><p><strong>设计思想</strong></p><ol><li>读写分离</li><li>最终一致性</li><li>使用时另外开辟空间，防止并发冲突</li></ol><p><strong>缺点</strong></p><ol><li>写操作时<strong>复制消耗内存</strong>，如果元素比较多时候，容易导致young gc 和full gc。</li><li>不能用于实时读的场景。由于复制和add操作等需要时间，故读取时可能读到旧值。<strong>能做到最终一致性，但无法满足实时性的要求，更适合读多写少的场景</strong>。如果无法知道数组有多大，或者add,set操作有多少，慎用此类,在大量的复制副本的过程中很容易出错。</li></ol><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>Map 这样的 <code>Key Value</code> 在软件开发中是非常经典的结构，常用于在内存中存放数据。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>众所周知 HashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p><p><strong>Base 1.7</strong></p><p><img src="http://image.onebug.tech/5cd1d2be77958.jpg" alt="img"></p><p><strong>Base 1.8</strong></p><p>其实一个很明显的地方就是：当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 <code>O(N)</code>。因此 1.8 中重点优化了这个查询效率，判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。</p><p><img src="http://image.onebug.tech/5cd1d2c1c1cd7.jpg" alt="img"></p><p><strong>线程不安全</strong></p><p>HashMap 扩容的时候会调用 <code>resize()</code> 方法，就是这里的并发操作容易在一个桶上形成<strong>环形链表</strong>；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。</p><blockquote><p><a href="https://coolshell.cn/articles/9606.html#问题的症状" target="_blank" rel="noopener">疫苗：Java HashMap的死循环 | 酷 壳 - CoolShell</a></p></blockquote><h3 id="ConcurrentHashMap-1"><a href="#ConcurrentHashMap-1" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p><strong>Base 1.7</strong></p><p><img src="http://image.onebug.tech/5cd1d2c5ce95c.jpg" alt="img"></p><p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。</p><p>它的核心成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Set&lt;K&gt; keySet;</span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶</span></span><br><span class="line">       <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理上来说：ConcurrentHashMap 采用了<strong>分段锁技术</strong>，其中 <strong>Segment 继承于 ReentrantLock</strong>。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理<strong>，理论上 ConcurrentHashMap 支持 CurrencyLevel （Segment 数组数量）的线程并发</strong>。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p><p><strong>Base 1.8</strong></p><p><img src="http://image.onebug.tech/5cd1d2ce33795.jpg" alt="img"></p><p>1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但查询遍历链表效率太低。1.8抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p><h2 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h2><p>底层实现采用SkipList跳表<br>曾经有人用ConcurrentHashMap与ConcurrentSkipListMap做性能测试，在4个线程1.6W的数据条件下，前者的数据存取速度是后者的4倍左右。但是后者有几个前者不能比拟的优点：</p><ul><li>Key是<strong>有序</strong>的</li><li>支持<strong>更高的并发</strong>，存储时间与线程数无关</li></ul><blockquote><p>安全共享对象策略:</p><ul><li>线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改</li><li>共享只读：一个共享只读的U帝乡，在没有额外同步的情况下，可以被多个线程并发访问，但是任何线程都不能修改它</li><li>线程安全对象：一个线程安全的对象或者容器，在内部通过同步机制来保障线程安全，多以其他线程无需额外的同步就可以通过公共接口随意访问他</li><li>被守护对象：被守护对象只能通过获取特定的锁来访问。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;并发容器&quot;&gt;&lt;a href=&quot;#并发容器&quot; class=&quot;headerlink&quot; title=&quot;并发容器&quot;&gt;&lt;/a&gt;并发容器&lt;/h1&gt;&lt;p&gt;Java并发容器JUC是三个单词的缩写。是JDK下面的一个包名。即&lt;code&gt;Java.util.concurrency&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;CopyOnWriteArrayList&quot;&gt;&lt;a href=&quot;#CopyOnWriteArrayList&quot; class=&quot;headerlink&quot; title=&quot;CopyOnWriteArrayList&quot;&gt;&lt;/a&gt;CopyOnWriteArrayList&lt;/h2&gt;&lt;p&gt;CopyOnWriteArrayList 写操作时复制，当有新元素添加到集合中时，从原有的数组中拷贝一份出来，然后在新的数组上作写操作，将原来的数组指向新的数组。整个数组的add操作都是在锁的保护下进行的，防止并发时复制多份副本。读操作是在原数组中进行，不需要加锁。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>线程不安全类与同步容器</title>
    <link href="http://www.onebug.tech/2021/04/16/java/java%E5%B9%B6%E5%8F%91/ch6%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%B1%BB%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.onebug.tech/2021/04/16/java/java%E5%B9%B6%E5%8F%91/ch6%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%B1%BB%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2021-05-08T10:00:29.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程不安全类"><a href="#线程不安全类" class="headerlink" title="线程不安全类"></a>线程不安全类</h1><p>如果一个类的对象同时可以被多个线程访问，并且你不做特殊的同步或并发处理，那么它就很容易表现出线程不安全的现象。比如抛出异常、逻辑处理错误等。下面列举一下常见的线程不安全的类及对应的线程安全类：</p><a id="more"></a><h2 id="StringBuilder-与-StringBuffer"><a href="#StringBuilder-与-StringBuffer" class="headerlink" title="StringBuilder 与 StringBuffer"></a>StringBuilder 与 StringBuffer</h2><p>StringBuilder是线程不安全的，而StringBuffer是线程安全的。StringBuffer的方法使用了<code>synchronized</code>关键字修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringBuffer的方法使用了synchronized关键字修饰。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SimpleDateFormat-与-jodatime插件"><a href="#SimpleDateFormat-与-jodatime插件" class="headerlink" title="SimpleDateFormat 与 jodatime插件"></a>SimpleDateFormat 与 jodatime插件</h2><p>SimpleDateFormat 类在处理时间的时候，如下写法是线程不安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        simpleDateFormat.parse(<span class="string">"20180208"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"parse exception"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用线程封闭等手段，也可以使用jodatime插件来转换时间，Joda 类具有不可变性，因此它们的实例无法被修，可以保证线程安全性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, i, DateTime.parse(<span class="string">"20180208"</span>, dateTimeFormatter).toDate());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList-HashSet-HashMap…"><a href="#ArrayList-HashSet-HashMap…" class="headerlink" title="ArrayList,HashSet,HashMap…"></a>ArrayList,HashSet,HashMap…</h2><p>像ArrayList,HashSet,HashMap 等Collection类均是线程不安全的，我们以ArrayList举例分析一下源码：</p><p>首先看看这个类所拥有的<strong>部分</strong>属性字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元素集合数组</span></span><br><span class="line"><span class="comment">     * 如果新建ArrayList对象时没有指定大小，那么会将EMPTY_ELEMENTDATA赋值给elementData，</span></span><br><span class="line"><span class="comment">     * 并在第一次添加元素时，将列表容量设置为DEFAULT_CAPACITY </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表大小，elementData中存储的元素个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以通过这两个字段我们可以看出，ArrayList的实现主要就是用了一个Object的数组，用来保存所有的元素，以及一个size变量用来保存当前数组中已经添加了多少元素。</p><p>接着我们看下最重要的add操作时的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个元素时，做了如下两步操作</span></span><br><span class="line"><span class="comment">     * 1.判断列表的capacity容量是否足够，是否需要扩容</span></span><br><span class="line"><span class="comment">     * 2.真正将元素放在列表的元素数组里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ensureCapacityInternal()</code>这个方法的详细代码我们可以暂时不看，它的作用就是判断如果将当前的新元素加到列表后面，列表的<code>elementData</code>数组的大小是否满足，如果size + 1的这个需求长度大于了<code>elementData</code>这个数组的长度，那么就要对这个数组进行<strong>扩容</strong>。</p><p>由此看到add元素时，实际做了两个大的步骤：</p><ol><li>判断<code>elementData</code>数组容量是否满足需求</li><li>在<code>elementData</code>对应位置上设置值</li></ol><p>这样也就出现了第一个导致线程不安全的隐患，在<strong>多个线程进行add操作时可能会导致<code>elementData</code>数组越界</strong>。具体逻辑如下：</p><ol><li>列表大小为9，即size=9</li><li>线程A开始进入add方法，这时它获取到size的值为9，调用<code>ensureCapacityInternal</code>方法进行容量判断。</li><li>线程B此时也进入add方法，它获取到size的值也为9，也开始调用<code>ensureCapacityInternal</code>方法。</li><li>线程A发现需求大小为10，而<code>elementData</code>的大小就为10，可以容纳。于是它不再扩容，返回。</li><li>线程B也发现需求大小为10，也可以容纳，返回。</li><li>线程A开始进行设置值操作， <code>elementData[size++] = e</code> 操作。此时size变为10。</li><li>线程B也开始进行设置值操作，它尝试设置<code>elementData[10] = e</code>，而<code>elementData</code>没有进行过扩容，它的标最大为9。于是此时会报出一个数组越界的异常<code>ArrayIndexOutOfBoundsException</code>.</li></ol><p>另外第二步 <code>elementData[size++] = e</code> 设置值的操作同样会导致线程不安全。从这儿可以看出，这步操作也不是一个原子操作，它由如下两步操作构成：</p><ol><li><code>elementData[size] = e;</code></li><li><code>size = size + 1;</code></li></ol><p>也就是说，当多线程环境下执行时，又可能会发生第二个导致线程不安全的隐患：<strong>一个线程的值覆盖另一个线程添加的值</strong>。</p><p>对应的线程安全类有哪些呢？接下来就涉及到我们同步容器。</p><h1 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h1><p>同步容器分两类，一种是Java提供好的类，另一类是Collections类中的相关同步方法。</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector实现了List接口，Vector实际上就是一个数组，和ArrayList非常的类似，但是内部的方法都是使用<code>synchronized</code>修饰过的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vector 的add 方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是Vector也不是完全的线程安全的，比如：</p><p><strong>删除与获取并发操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                vector.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread thread1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                        vector.remove(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            Thread thread2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                        vector.get(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread1.start();</span><br><span class="line">            thread2.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：报错<code>java.lang.ArrayIndexOutOfBoundsException: Array index out of range</code><br>原因分析：同时发生获取与删除的操作。当两个线程在同一时间都判断了vector的size，假设都判断为9，而下一刻线程1执行了remove操作，随后线程2才去get，所以就出现了错误。<strong>synchronized关键字可以保证同一时间只有一个线程执行该方法，但是多个线程同时分别执行remove、add、get操作的时候就无法控制了。</strong></p><p><strong>使用foreach\iterator遍历Vector的时候进行增删操作，也会出现问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报错java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// foreach</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : v1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 报错java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// iterator</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = v1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Integer i = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.add(<span class="number">1</span>);</span><br><span class="line">        vector.add(<span class="number">2</span>);</span><br><span class="line">        test1(vector);</span><br><span class="line">        test2(vector);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法：在使用iterator进行增删操作的时候，加上Lock或者synchronized同步措施或者并发容器</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            V old = entry.value;</span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码分析</p><ul><li><strong>使用了synchronized修饰</strong></li><li>保证安全性<strong>不允许空值</strong></li><li>HashMap和HashTable都使用哈希表来存储键值对</li></ul><h2 id="Collections类中的相关同步方法"><a href="#Collections类中的相关同步方法" class="headerlink" title="Collections类中的相关同步方法"></a>Collections类中的相关同步方法</h2><p><img src="http://image.onebug.tech/synContainer.png" alt="synContainer"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = Collections.synchronizedList(Lists.newArrayList());</span><br><span class="line"><span class="comment">//多线程调用方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程不安全类&quot;&gt;&lt;a href=&quot;#线程不安全类&quot; class=&quot;headerlink&quot; title=&quot;线程不安全类&quot;&gt;&lt;/a&gt;线程不安全类&lt;/h1&gt;&lt;p&gt;如果一个类的对象同时可以被多个线程访问，并且你不做特殊的同步或并发处理，那么它就很容易表现出线程不安全的现象。比如抛出异常、逻辑处理错误等。下面列举一下常见的线程不安全的类及对应的线程安全类：&lt;/p&gt;
    
    </summary>
    
    
      <category term="java高并发" scheme="http://www.onebug.tech/categories/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="java" scheme="http://www.onebug.tech/tags/java/"/>
    
      <category term="并发" scheme="http://www.onebug.tech/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="笔记" scheme="http://www.onebug.tech/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
